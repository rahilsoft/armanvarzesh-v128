diff --git a/apps/backend/src/payments/payments.controller.ts b/apps/backend/src/payments/payments.controller.ts
--- a/apps/backend/src/payments/payments.controller.ts
+++ b/apps/backend/src/payments/payments.controller.ts
@@ -1,6 +1,8 @@
-import { Body, Controller, Get, Param, Post, Req } from '@nestjs/common';
+import { Body, Controller, Get, Param, Post, Req, BadRequestException } from '@nestjs/common';
 import { PaymentsService } from './payments.service';
+// Requires `stripe` package and raw body capture on this route.
+// See apps/backend/src/payments/stripe.rawbody.middleware.ts

 @Controller('payments/v1')
 export class PaymentsController {
@@ -11,14 +13,28 @@
   }

   @Post('webhooks/stripe')
-  async stripeWebhook(@Req() req: any) {
-    // NOTE: In production, read raw body and verify signature with STRIPE_WEBHOOK_SECRET
-    const evt = req.body;
-    await this.svc.handleStripeWebhook(evt);
+  async stripeWebhook(@Req() req: any) {
+    const sig = req.headers['stripe-signature'];
+    const secret = process.env.STRIPE_WEBHOOK_SECRET;
+    try {
+      // eslint-disable-next-line @typescript-eslint/no-var-requires
+      const Stripe = require('stripe');
+      const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', { apiVersion: '2024-06-20' });
+      const event = stripe.webhooks.constructEvent(req.rawBody, sig, secret);
+      await this.svc.handleStripeWebhook(event);
+    } catch (err) {
+      throw new BadRequestException('Invalid Stripe signature');
+    }
     return { received: true };
   }
