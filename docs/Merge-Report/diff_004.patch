### Text-compare: /mnt/data/armanvarzesh/README.md

```
--- /mnt/data/armanvarzesh/README.md(old)
+++ /mnt/data/armanvarzesh/README.md(incoming)
@@ -1,22 +1,209 @@
-# Arman Varzesh — Monorepo (v66)
-
-این ریپو به معماری یکنواخت و استاندارد یکپارچه شده است:
-
-```
-/apps
-  /coach-pwa         # PWA مربی (Next.js)
-  /client-pwa        # PWA کاربر (Next.js)
-  /admin-panel       # پنل ادمین (Next.js)
-/services
-  /certificate-service  # سرویس صدور/راستی‌آزمایی گواهی و QR (NestJS)
-/packages              # پکیج‌های مشترک (UI, utils, types, ...)
-/docs                  # اسناد (Phase2..5)
-/k8s                   # مانیفست‌های کلاستر
-/tools/parity-check    # ابزار کنترل همترازی فیچرها
-/.github/workflows     # CI/CD
-docker-compose.yml
-pnpm-workspace.yaml
-package.json           # Workspaces
-```
-
-> نکته: پوشه‌های تودرتوی قدیمی (مثل `armanvarzesh_v63`) ادغام و حذف شده‌اند. هر فایلی که تضاد نام داشت به صورت `.incoming` کنار نسخهٔ اصلی نگه‌داری شده تا در Code Review نهایی بررسی شود.
+
+# آرمان ورزش — پلتفرم مربی‌گری، تغذیه و حرکات اصلاحی (Monorepo)
+
+این مخزن شامل **بک‌اند NestJS**، **اپلیکیشن‌های موبایل (React Native/Expo)** و **وب‌سایت Next.js** است که با معماری تمیز، امنیت سفت‌وسخت، و CI/CD یکپارچه توسعه داده شده‌اند.
+
+> این نسخه بر اساس فازهای ۱ تا ۶ بازبینی و **بازسازی کامل** شده و شامل: ارتقاء وابستگی‌ها، بهبود امنیت (SanitizePipe, Gitleaks)، بهینه‌سازی Build و حجم، تست‌های واحد/ویجت/E2E، و مستندسازی دقیق است.
+
+---
+
+## ویژگی‌ها (Highlights)
+- 💡 **Clean Architecture**: لایه‌های `domain/data/presentation`، جداسازی concerns.
+- ⚙️ **NestJS + GraphQL/REST + Prisma/PostgreSQL** با **Redis** و **BullMQ**.
+- 📱 **React Native (Expo)** برای اپ‌های کاربر و مربی + **Next.js** برای vitrin.
+- 🔐 امنیت: **ValidationPipe + SanitizePipe**، **Rate-limit/Helmet** (در صورت فعال‌سازی)، **Gitleaks** در CI.
+- 🧪 تست: Jest (Unit/Widget/E2E) برای Backend و RN.
+- 🚀 CI/CD: **GitHub Actions** (Build/Test/Security) و راهنمای **Codemagic**.
+- 📦 اندازهٔ خروجی کمتر: **inlineRequires**, حذف `console` در prod، بهینه‌سازی تصاویر (sharp/svgo).
+
+---
+
+## Tech Stack
+- **Backend**: NestJS 11، GraphQL (code-first) + REST، Prisma ORM، PostgreSQL، Redis، BullMQ، WebSocket
+- **Frontend**: React Native (Expo) + Next.js، Apollo Client، i18n
+- **Storage/Media**: S3/MinIO، Sharp/FFmpeg
+- **AI/ML**: Python + TensorFlow/PyTorch (SageMaker/GCP AI Platform) *(ماژول‌های ادغامی)*
+- **Infra**: Docker, Kubernetes, Helm, Terraform، CDN/WAF
+- **DevOps**: Monorepo با PNPM/Turborepo، GitHub Actions، CodeQL/Trivy (قابل‌افزودن)
+- **Observability**: OpenTelemetry + Prometheus/Loki/Grafana *(در حال توسعه)*
+
+---
+
+## ساختار مونو‌ریپو
+```
+.
+├─ apps/
+│  ├─ backend/            # NestJS + GraphQL/REST + Prisma
+│  ├─ user-app/           # React Native (Expo) – اپ کاربر
+│  ├─ coach-app/          # React Native (Expo) – اپ مربی
+│  └─ vitrin-site/        # Next.js وب‌سایت
+├─ packages/
+│  ├─ ui/                 # کتابخانهٔ UI مشترک (OptimizedText, DebouncedButton, hooks)
+│  ├─ utils/              # ابزارهای مشترک (useStableCallback, dispose/newAbort, prefetchImage)
+│  └─ state/              # store/state (Zustand + shallow selectors)
+├─ .github/workflows/     # CI (از جمله security-gitleaks.yml)
+├─ scripts/               # optimize-assets.mjs (sharp + svgo)
+├─ pnpm-workspace.yaml
+└─ package.json
+```
+
+---
+
+## پیش‌نیازها
+- **Node.js 20 LTS** (پیشنهاد)  
+- **PNPM 9.x** (از طریق Corepack)
+- **PostgreSQL 14+**، **Redis 6+** (برای اجرای کامل بک‌اند)
+
+```bash
+# فعال‌سازی Corepack و پین نسخهٔ pnpm
+corepack enable
+corepack use pnpm@9.6.0
+```
+
+---
+
+## راه‌اندازی سریع (Quick Start)
+```bash
+# 1) نصب وابستگی‌ها
+pnpm -w i
+
+# 2) بهینه‌سازی اختیاری تصاویر و SVG ها
+pnpm -w optimize:assets
+
+# 3) آماده‌سازی پایگاه‌داده (Prisma)
+cd apps/backend
+pnpm prisma migrate deploy   # یا: pnpm prisma migrate dev
+
+# 4) اجرای سرویس‌ها (مثال‌های متداول)
+# Backend
+pnpm -C apps/backend start:dev
+
+# User app (Expo)
+pnpm -C apps/user-app start
+
+# Vitrin (Next.js)
+pnpm -C apps/vitrin-site dev
+```
+
+> **نکته:** فایل‌های نمونهٔ env را از `*.example` کپی و مقداردهی کنید. کلیدهای حساس را هرگز در مخزن نگه ندارید.
+
+---
+
+## متغیرهای محیطی (نمونه‌های مهم Backend)
+| متغیر | توضیح |
+|---|---|
+| `DATABASE_URL` | آدرس PostgreSQL (فرمت: `postgres://user:pass@host:5432/db`) |
+| `REDIS_URL` | آدرس Redis |
+| `JWT_SECRET`, `JWT_TTL` | توکن و TTL |
+| `REFRESH_JWT_SECRET`, `REFRESH_JWT_TTL` | توکن رفرش و TTL |
+| `ADMIN_USERS_JSON` | آرایه‌ای از `{{ u, h, r }}` برای ادمین‌ها؛ `h` هش bcrypt |
+
+---
+
+## تست‌ها
+### Backend
+```bash
+# Unit
+pnpm -C apps/backend test
+
+# Coverage
+pnpm -C apps/backend test:coverage
+
+# Integration/E2E (Auth → Payments)
+pnpm -C apps/backend test:e2e
+```
+
+### React Native (user-app)
+```bash
+pnpm -C apps/user-app test
+```
+
+---
+
+## Build (محلی)
+### Backend (NestJS)
+```bash
+pnpm -C apps/backend build
+```
+
+### Next.js (Production)
+```bash
+pnpm -C apps/vitrin-site build
+pnpm -C apps/vitrin-site start
+```
+
+### React Native (Expo)
+- از **EAS** یا **Codemagic** استفاده کنید. برای خروجی release Android، Gradle با **minifyEnabled/shrinkResources** پیکربندی شده است (در صورت وجود فولدر android/).
+
+---
+
+## CI/CD
+### GitHub Actions
+- امنیت: `security-gitleaks.yml` → اجرای Gitleaks روی هر `push/PR` با پیکربندی `.gitleaks.toml`
+- می‌توانید workflow های build/test را مطابق ساختار Monorepo اضافه کنید (مثال):
+```yaml
+- name: Use Node
+  uses: actions/setup-node@v4
+  with:
+    node-version: '20'
+    cache: 'pnpm'
+- run: corepack enable && corepack use pnpm@9.6.0
+- run: pnpm -w i
+- run: pnpm -C apps/backend test
+```
+
+### Codemagic (راهنما)
+- Node 20 LTS، فعال‌سازی Corepack، `pnpm -w i`
+- Build وب/بک‌اند/موبایل بر اساس workflow دلخواه.
+- کش PNPM و gradle/cocoapods را فعال کنید.  
+- برای Android/iOS از متغیرهای امن جهت keystore/provisioning استفاده کنید.
+
+---
+
+## امنیت
+- **SanitizePipe** + **ValidationPipe**: حذف کلیدهای خطرناک و بررسی دقیق DTO ها.
+- **Cache-Control** (اختیاری): `@cacheControl(...)` برای GETها.
+- **Gitleaks**: روی هر commit/PR اجرا می‌شود؛ کلیدها را در Secrets نگه دارید.
+- **.gitignore** سخت‌تر شده؛ فایل‌های حساس (`*.pem`, `*.keystore`, `google-services.json`, …) نادیده گرفته می‌شوند.
+
+---
+
+## راهنمای عیب‌یابی (Troubleshooting)
+- **ERR_PNPM_NO_MATCHING_VERSION (@nestjs/passport@^10 → 11.0.5):**  
+  نسخهٔ `@nestjs/passport` را به **11.0.5** پین کنید و `pnpm up -r` بزنید.
+- **ERR_PNPM_NO_OFFLINE_META (typescript@>=5.5 <6):**  
+  حالت آفلاین/کش محلی CI را خاموش کنید، TypeScript را به **۵.۶.x** پین و **lockfile** را commit کنید.
+- **Install workspace dependencies (lockfile-aware):**  
+  `pnpm-lock.yaml` ریشه را commit و در CI از `pnpm -w i` استفاده کنید.
+- **Corepack pnpm download:**  
+  در CI: `corepack enable && corepack use pnpm@9.6.0` + کش فعال.
+- **Deprecated apollo-server-express@3:**  
+  به **@apollo/server (v4)** مهاجرت کنید (در این پروژه مسیر مهاجرت فراهم شده است).
+
+---
+
+## قراردادهای کدنویسی
+- ESLint + Prettier فعال؛ قوانین امنیتی: `no-eval`, `no-implied-eval`, `@typescript-eslint/no-implied-eval`  
+- React performance hints: `react/jsx-no-bind`, `react/no-array-index-key`, `react/jsx-no-constructed-context-values`
+- UI/State: از `useStableCallback`، `selector + shallow` استفاده کنید.
+
+---
+
+## اسکریپت‌های مفید
+```bash
+# بهینه‌سازی تصاویر/SVG در کل مخزن
+pnpm -w optimize:assets
+# آنالیز باندل Next.js
+pnpm -C apps/vitrin-site analyze
+```
+
+---
+
+## مجوزها (Permissions)
+- **Android**: فقط `INTERNET` و `ACCESS_NETWORK_STATE` در حالت پایه + `usesCleartextTraffic=false` (در Release)  
+- **iOS**: ATS سخت‌گیر (`NSAllowsArbitraryLoads=false`)، توضیح مجوزهای دوربین/گالری (در صورت استفاده)
+
+---
+
+## حق مؤلف
+© 2025 Arman Varzesh.

```