generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessions     Session[]
  refreshTokens RefreshToken[]
}

model Session {

  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  lastSeen  DateTime @default(now())
  @@index([userId], map: "idx_Session_userId")
}

model RefreshToken {

  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  tokenHash    String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  revokedAt    DateTime?
  @@index([userId], map: "idx_RefreshToken_userId")
}
model Device {

  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String?
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  lastSeen  DateTime @default(now())
  @@index([userId], map: "idx_Device_userId")
}

model PasswordResetToken {

  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  @@index([userId], map: "idx_PasswordResetToken_userId")
}
