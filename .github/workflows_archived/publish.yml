name: Publish & Scan
on:
  release:
    types: [published]
permissions:
  contents: write
  packages: write
  id-token: write
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile

      - name: Build (workspace)
        run: pnpm -r build --no-cache || true

      - name: SBOM (CycloneDX)
        run: npx @cyclonedx/cyclonedx-npm --ignore-npm-errors --json --output-file sbom.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            sbom.json
            **/dist/**
            **/build/**
            **/.next/**

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Discover Dockerfiles
        id: discover
        run: |
          json="[]"
          while IFS= read -r f; do
            dir=$(dirname "$f")
            name=$(basename "$dir")
            json=$(jq -c --arg f "$f" --arg n "$name" '. + [{"file":$f,"name":$n}]' <<<"$json")
          done < <(git ls-files | grep -iE '(^|/)(Dockerfile)$' || true)
          echo "matrix=$json" >> $GITHUB_OUTPUT

      - name: Build & Push images
        if: ${{ steps.discover.outputs.matrix != '[]' }}
        run: |
          set -e
          TAG=${GITHUB_REF_NAME}
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          while read -r row; do
            FILE=$(echo "$row" | jq -r '.file')
            NAME=$(echo "$row" | jq -r '.name')
            DIR=$(dirname "$FILE")
            IMAGE="ghcr.io/${REPO_OWNER}/${NAME}:${TAG}"
            echo "Building $IMAGE from $FILE"
            docker buildx build --push -t "$IMAGE" "$DIR"
          done <<< "$(echo '${{ steps.discover.outputs.matrix }}' | jq -c '.[]')"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
      - name: Sign images (keyless)
        if: ${{ steps.discover.outputs.matrix != '[]' }}
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          TAG=${GITHUB_REF_NAME}
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          while read -r row; do
            NAME=$(echo "$row" | jq -r '.name')
            IMAGE="ghcr.io/${REPO_OWNER}/${NAME}:${TAG}"
            cosign sign --yes "$IMAGE"
          done <<< "$(echo '${{ steps.discover.outputs.matrix }}' | jq -c '.[]')"

      - name: Trivy scan images
        if: ${{ steps.discover.outputs.matrix != '[]' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: |
            ${{ join(fromJSON(steps.discover.outputs.matrix).*.name, '\n') }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          limit-severities-for-sarif: true
