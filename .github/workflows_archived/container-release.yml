name: Container Release — build • push • sign • sbom
on:
  push:
    tags:
      - 'backend-v*'
      - 'site-v*'
  workflow_dispatch:
    inputs:
      service:
        description: 'backend or site'
        required: true
        default: 'backend'

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["backend","site"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Derive tags
        id: vars
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/${{ matrix.service }}
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=ci-${GITHUB_SHA::7}
          fi
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: app/${{ matrix.service }}
          push: true
          tags: |
            ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }}
            ${{ steps.vars.outputs.image }}:latest
          provenance: true
          sbom: true
      - name: Generate CycloneDX SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }}
          format: cyclonedx-json
          output-file: sbom-${{ matrix.service }}.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.json
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.7.0
      - name: Sign image (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }}
      - name: Attach SBOM to image (OCI artifact)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attach sbom --sbom sbom-${{ matrix.service }}.json ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }}
