
import { Injectable } from '@nestjs/common';
import { Admin } from './entities/admin.entity';
import { PrismaService } from '../database/prisma.service';

@Injectable()
export class AdminService {
  constructor(private prisma: PrismaService) {}

  async findAll(): Promise<Admin[]> {
    return this.prisma.admin.findMany();
  }
  async findOne(id: number): Promise<Admin> {
    return this.prisma.admin.findUnique({ where: { id } });
  }

  /**
   * Create a new admin user. The id and createdAt timestamp are
   * automatically generated by the database.
   */
  async create(input: Partial<Admin>): Promise<Admin> {
    return this.prisma.admin.create({ data: { email: input.email, name: input.name, createdAt: new Date() } });
  }

  /**
   * Update an existing admin by ID. Only provided fields will be
   * overwritten. Returns the updated admin or null if not found.
   */
  async update(id: number, input: Partial<Admin>): Promise<Admin> {
    return this.prisma.admin.update({ where: { id }, data: { email: input.email, name: input.name } });
  }

  /**
   * Delete an admin by ID. Returns true if the admin existed and was
   * removed, false otherwise.
   */
  async delete(id: number): Promise<boolean> {
    await this.prisma.admin.delete({ where: { id } });
    return true;
  }
}
