{
  "rest_map_detailed": [
    {
      "method": "DELETE",
      "path": "/:id",
      "server_defs": [
        {
          "method": "DELETE",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
          "line": 10,
          "snippet": "export class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "DELETE",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
          "line": 10,
          "snippet": "export class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "DELETE",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
          "line": 10,
          "snippet": "export class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "DELETE",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
          "line": 10,
          "snippet": "export class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "DELETE",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
          "line": 10,
          "snippet": "export class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "DELETE",
      "path": "/workouts/:id",
      "server_defs": [
        {
          "method": "DELETE",
          "path": "/workouts/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
          "line": 31,
          "snippet": "\n  @Put(':id')\n  update(@Param('id') id: string, @Body() dto: any) {\n    return this.svc.update(id, dto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.svc.delete(id);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/",
      "server_defs": [
        {
          "method": "GET",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/payments.controller.ts",
          "line": 30,
          "snippet": "      amountCents: dto.amountCents,\n      currency: dto.currency,\n      idempotencyKey: idemKey || dto.idempotencyKey,\n    });\n  }\n\n  @Get(API_ROUTES.PAYMENTS.ROOT)\n  @UseInterceptors(CacheControlInterceptor)\n  @cacheControl('private, max-age=15, stale-while-revalidate=30')\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  async list(\n    @Headers('x-user-id') userId: string,"
        },
        {
          "method": "GET",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { RewardsService } from './rewards.service'\n@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { PhysioService } from './physio.service'\n@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AssessmentsService } from './assessments.service'\n@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AnalyticsService } from './analytics.service'\n@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { BookingService } from './booking.service'\n@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/.well-known/jwks.json",
      "server_defs": [
        {
          "method": "GET",
          "path": "/.well-known/jwks.json",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/jwks.controller.ts",
          "line": 8,
          "snippet": "import { ConfigService } from '@nestjs/config';\nimport { signer } from '@arman/auth-kit';\n\n@Controller('.well-known')\nexport class JwksController {\n  constructor(private readonly config: ConfigService) {}\n  @Get('jwks.json')\n  async getJwks() {\n    const kid = process.env.JWT_KID || 'dev-1';\n    const alg = (process.env.JWT_ALG as any) || 'RS256';\n    const pem = process.env.JWKS_PRIVATE_PEM || '';\n    if (!pem) {"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { RewardsService } from './rewards.service'\n@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { PhysioService } from './physio.service'\n@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AssessmentsService } from './assessments.service'\n@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AnalyticsService } from './analytics.service'\n@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "GET",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { BookingService } from './booking.service'\n@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/admins",
      "server_defs": [
        {
          "method": "GET",
          "path": "/admins",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/admin/controllers/admin.controller.ts",
          "line": 10,
          "snippet": "import { Admin } from '../entities/admin.entity';\n\n@Controller('admins')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Get()\n  async findAll(): Promise<Admin[]> {\n    return this.adminService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/admins/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/admins/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/admin/controllers/admin.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Admin[]> {\n    return this.adminService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Admin> {\n    return this.adminService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/affiliate",
      "server_defs": [
        {
          "method": "GET",
          "path": "/affiliate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__affiliate.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /affiliate\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('affiliate')\nexport class GET__affiliateController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/affiliate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/affiliate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Affiliate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/affiliate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>affiliate — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/affiliate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/affiliate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Affiliate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/affiliate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>affiliate — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/ai",
      "server_defs": [
        {
          "method": "GET",
          "path": "/ai",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__ai.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /ai\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('ai')\nexport class GET__aiController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/ai",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/ai/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Ai() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/ai').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>ai — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/ai",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/ai/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Ai() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/ai').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>ai — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/analytics",
      "server_defs": [
        {
          "method": "GET",
          "path": "/analytics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__analytics.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /analytics\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('analytics')\nexport class GET__analyticsController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/analytics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/analytics/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Analytics() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/analytics').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>analytics — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/analytics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/analytics/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Analytics() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/analytics').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>analytics — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/affiliate",
      "server_defs": [
        {
          "method": "GET",
          "path": "/api/affiliate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_affiliate.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /api/affiliate\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/affiliate')\nexport class GET__api_affiliateController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/affiliate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/affiliate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Affiliate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/affiliate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>affiliate</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/affiliate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/affiliate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Affiliate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/affiliate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>affiliate</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/ai",
      "server_defs": [
        {
          "method": "GET",
          "path": "/api/ai",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_ai.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /api/ai\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/ai')\nexport class GET__api_aiController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/ai",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/ai/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Ai() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/ai').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>ai</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/ai",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/ai/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Ai() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/ai').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>ai</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/analytics",
      "server_defs": [
        {
          "method": "GET",
          "path": "/api/analytics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_analytics.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /api/analytics\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/analytics')\nexport class GET__api_analyticsController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/analytics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/analytics/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Analytics() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/analytics').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>analytics</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/analytics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/analytics/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Analytics() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/analytics').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>analytics</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/assessments",
      "server_defs": [
        {
          "method": "GET",
          "path": "/api/assessments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_assessments.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /api/assessments\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/assessments')\nexport class GET__api_assessmentsController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/assessments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/assessments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Assessments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/assessments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>assessments</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/assessments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/assessments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Assessments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/assessments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>assessments</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/booking",
      "server_defs": [
        {
          "method": "GET",
          "path": "/api/booking",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_booking.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /api/booking\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/booking')\nexport class GET__api_bookingController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/booking",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/booking/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Booking() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/booking').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>booking</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/booking",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/booking/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Booking() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/booking').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>booking</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/certificate",
      "server_defs": [
        {
          "method": "GET",
          "path": "/api/certificate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_certificate.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /api/certificate\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/certificate')\nexport class GET__api_certificateController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/certificate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/certificate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Certificate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/certificate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>certificate</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/certificate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/certificate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Certificate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/certificate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>certificate</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/chat",
      "server_defs": [
        {
          "method": "GET",
          "path": "/api/chat",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_chat.controller.ready.ts",
          "line": 6,
          "snippet": "// Stage 14 Ready Controller for REST call: GET /api/chat\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/chat')\nexport class GET__api_chatController {\n  @Get()\n  handle(){ return { ok: true }; }\n}\n*/"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/chat",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/chat/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Chat() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/chat').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>chat</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/chat",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/chat/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Chat() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/chat').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>chat</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/api/coaches",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/coaches",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/coaches/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Coaches() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/coaches').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>coaches</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/coaches",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/coaches/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Coaches() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/coaches').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>coaches</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/courses",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/courses",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/courses/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>courses</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/courses",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/courses/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>courses</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/marketplace",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/marketplace",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/marketplace/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Marketplace() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/marketplace').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>marketplace</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/marketplace",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/marketplace/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Marketplace() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/marketplace').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>marketplace</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/metrics?name=",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/metrics?name=",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/admin/experiments/page.tsx",
          "line": 13,
          "snippet": "    <h3 style={{marginTop:0}}>{title}</h3>\n    {children}\n  </div>;\n}\n\nasync function fetchMetric(name:string){\n  const r = await fetch('/api/metrics?name=' + encodeURIComponent(name));\n  const j = await r.json();\n  // clickhouse JSON: { data: [...], meta: [...] }\n  return j.data || [];\n}\n"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/monitoring",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/monitoring",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/monitoring/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>monitoring</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/monitoring",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/monitoring/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>monitoring</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/notifications",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/notifications",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/notifications/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>notifications</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/notifications",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/notifications/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>notifications</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/nutrition",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/nutrition",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/nutrition/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>nutrition</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/nutrition",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/nutrition/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>nutrition</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/payments",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/payments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/payments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Payments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/payments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>payments</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/payments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/payments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Payments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/payments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>payments</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/physio",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/physio",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/physio/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>physio</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/physio",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/physio/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>physio</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/rewards",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/rewards",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/rewards/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>rewards</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/rewards",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/rewards/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>rewards</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/vip",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/vip",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/vip/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>vip</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/vip",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/vip/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>vip</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/api/workouts",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/api/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/workouts/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Workouts() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/workouts').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>workouts</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/api/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/workouts/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Workouts() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/workouts').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>workouts</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/assessments",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/assessments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/assessments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Assessments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/assessments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>assessments — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/assessments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/assessments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Assessments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/assessments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>assessments — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/auth/me",
      "server_defs": [
        {
          "method": "GET",
          "path": "/auth/me",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
          "line": 26,
          "snippet": "  @Post('refresh')\n  @UseGuards(JwtAuthGuard)\n  async refresh(@Req() req: any, @Body() dto: RefreshDto) {\n    return this.auth.refresh(req.user.sub, dto.refreshToken);\n  }\n\n  @Get('me')\n  @UseGuards(JwtAuthGuard)\n  me(@Req() req: any) {\n    return { userId: req.user.sub, email: req.user.email };\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/bff-mobile/dashboard",
      "server_defs": [
        {
          "method": "GET",
          "path": "/bff-mobile/dashboard",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/bff-mobile/bff-mobile.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get, Query } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\n\n@Controller('bff-mobile')\nexport class BffMobileController {\n  constructor(private prisma: PrismaService) {}\n  @Get('dashboard')\n  async dashboard(@Query('userId') userId: string) {\n    const [workouts, notifications] = await Promise.all([\n      (this.prisma as any).workout.findMany({ where: { userId }, take: 3, orderBy: { date: 'desc' } }),\n      (this.prisma as any).notification?.findMany?.({ where: { userId }, take: 5, orderBy: { createdAt: 'desc' } }) || []\n    ]);"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/bff-web/home",
      "server_defs": [
        {
          "method": "GET",
          "path": "/bff-web/home",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/bff-web/bff-web.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get, Query } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\n\n@Controller('bff-web')\nexport class BffWebController {\n  constructor(private prisma: PrismaService) {}\n  @Get('home')\n  async home(@Query('userId') userId: string) {\n    const [user, workouts] = await Promise.all([\n      (this.prisma as any).user.findUnique({ where: { id: userId } }),\n      (this.prisma as any).workout.findMany({ where: { userId }, take: 5, orderBy: { date: 'desc' } }),\n    ]);"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/bff/dashboard",
      "server_defs": [
        {
          "method": "GET",
          "path": "/bff/dashboard",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/bff/bff.controller.ts",
          "line": 8,
          "snippet": "import { PrismaService } from '../database/prisma.service';\n\n@Controller('bff')\nexport class BffController {\n  constructor(private prisma: PrismaService) {}\n  // Aggregate few quick stats for dashboard in one request\n  @Get('dashboard')\n  async dashboard(@Query('userId') userId: string) {\n    const [workouts, upcoming, notifications] = await Promise.all([\n      (this.prisma as any).workout.count({ where: { userId } }),\n      (this.prisma as any).session?.findMany?.({ where: { userId, date: { gte: new Date() } }, take: 5 }) ?? [],\n      (this.prisma as any).notification?.findMany?.({ where: { userId }, take: 5 }) ?? [],"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/booking",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/booking",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/booking/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Booking() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/booking').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>booking — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/booking",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/booking/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Booking() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/booking').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>booking — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/cert/verify",
      "server_defs": [
        {
          "method": "GET",
          "path": "/cert/verify",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/certificate/certificate.controller.ts",
          "line": 17,
          "snippet": "  @Roles('admin')\n  @UseGuards(RolesGuard)\n  async issue(@Body() body: any) {\n    return this.svc.issueCertificate(body);\n  }\n\n  @Get('verify')\n  verify(@Query('t') t: string) {\n    return this.svc.verify(t);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/certificate",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/certificate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/certificate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Certificate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/certificate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>certificate — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/certificate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/certificate/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Certificate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/certificate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>certificate — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/challenges",
      "server_defs": [
        {
          "method": "GET",
          "path": "/challenges",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/challenges/controllers/challenges.controller.ts",
          "line": 10,
          "snippet": "import { Challenge } from '../entities/challenge.entity';\n\n@Controller('challenges')\nexport class ChallengesController {\n  constructor(private readonly challengesService: ChallengesService) {}\n\n  @Get()\n  async findAll(): Promise<Challenge[]> {\n    return this.challengesService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/challenges/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/challenges/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/challenges/controllers/challenges.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Challenge[]> {\n    return this.challengesService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Challenge> {\n    return this.challengesService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/chat",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/chat",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/chat/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Chat() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/chat').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>chat — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/chat",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/chat/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Chat() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/chat').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>chat — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/coaches",
      "server_defs": [
        {
          "method": "GET",
          "path": "/coaches",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/coaches/controllers/coaches.controller.ts",
          "line": 10,
          "snippet": "import { Coach } from '../entities/coach.entity';\n\n@Controller('coaches')\nexport class CoachesController {\n  constructor(private readonly coachesService: CoachesService) {}\n\n  @Get()\n  async findAll(): Promise<Coach[]> {\n    return this.coachesService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/coaches",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/coaches/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Coaches() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/coaches').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>coaches — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/coaches",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/coaches/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Coaches() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/coaches').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>coaches — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/coaches/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/coaches/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/coaches/controllers/coaches.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Coach[]> {\n    return this.coachesService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Coach> {\n    return this.coachesService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/contents",
      "server_defs": [
        {
          "method": "GET",
          "path": "/contents",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/cms/controllers/cms.controller.ts",
          "line": 10,
          "snippet": "import { Cms } from '../entities/cms.entity';\n\n@Controller('contents')\nexport class CmsController {\n  constructor(private readonly cmsService: CmsService) {}\n\n  @Get()\n  async findAll(): Promise<Cms[]> {\n    return this.cmsService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/contents/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/contents/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/cms/controllers/cms.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Cms[]> {\n    return this.cmsService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Cms> {\n    return this.cmsService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/corporate",
      "server_defs": [
        {
          "method": "GET",
          "path": "/corporate",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/corporate/controllers/corporate.controller.ts",
          "line": 10,
          "snippet": "import { Corporate } from '../entities/corporate.entity';\n\n@Controller('corporate')\nexport class CorporateController {\n  constructor(private readonly corporateService: CorporateService) {}\n\n  @Get()\n  async findAll(): Promise<Corporate[]> {\n    return this.corporateService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/corporate/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/corporate/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/corporate/controllers/corporate.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Corporate[]> {\n    return this.corporateService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Corporate> {\n    return this.corporateService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/courses",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/courses",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/courses/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>courses — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/courses",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/courses/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>courses — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/experiments",
      "server_defs": [
        {
          "method": "GET",
          "path": "/experiments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/experiments/controllers/experiments.controller.ts",
          "line": 10,
          "snippet": "import { Experiment } from '../entities/experiment.entity';\n\n@Controller('experiments')\nexport class ExperimentsController {\n  constructor(private readonly experimentsService: ExperimentsService) {}\n\n  @Get()\n  async findAll(): Promise<Experiment[]> {\n    return this.experimentsService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/experiments/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/experiments/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/experiments/controllers/experiments.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Experiment[]> {\n    return this.experimentsService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Experiment> {\n    return this.experimentsService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/fcm/send",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "https://fcm.googleapis.com/fcm/send",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.service.ts",
          "line": 42,
          "snippet": "    return { id: rec.id };\n  }\n\n  async sendPush(dto: {token: string; title: string; body: string; data?: any}) {\n    const serverKey = process.env.FCM_SERVER_KEY;\n    if (!serverKey) throw new Error('FCM_SERVER_KEY missing');\n    const resp = await fetch('https://fcm.googleapis.com/fcm/send', {\n      method: 'POST',\n      headers: { 'Authorization': `key=${serverKey}`, 'Content-Type':'application/json' },\n      body: JSON.stringify({ to: dto.token, notification: { title: dto.title, body: dto.body }, data: dto.data || {} })\n    });\n    const j = await resp.json();"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/health",
      "server_defs": [
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/health/health.controller.ts",
          "line": 5,
          "snippet": "import { Controller, Get } from '@nestjs/common';\n\n@Controller('health')\nexport class HealthController {\n  @Get()\n  ping() {\n    return { ok: true, service: 'backend', ts: Date.now() };\n  }\n}"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/health/health.controller.ts",
          "line": 4,
          "snippet": "import { Controller, Get } from '@nestjs/common';\n@Controller('health')\nexport class HealthController {\n  @Get()\n  liveness() { return { status: 'ok', ts: Date.now() }; }\n}"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        },
        {
          "method": "GET",
          "path": "/health",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/health/health.controller.ts",
          "line": 15,
          "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "server_defs": [
        {
          "method": "GET",
          "path": "/healthz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/common/controllers/health.controller.ts",
          "line": 5,
          "snippet": "import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class HealthController {\n  @Get('/healthz')\n  health() { return { ok: true }; }\n\n  @Get('/readyz')\n  ready() { return { ok: true }; }\n}"
        },
        {
          "method": "GET",
          "path": "/healthz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/health.controller.ts",
          "line": 4,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/healthz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/health.controller.ts",
          "line": 4,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/healthz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/health.controller.ts",
          "line": 4,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/healthz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/health.controller.ts",
          "line": 4,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/healthz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/health.controller.ts",
          "line": 6,
          "snippet": "\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class HealthController {\n  @Get('/healthz') health(){ return { ok: true }; }\n  @Get('/ready') ready(){ return { ready: true }; }\n}"
        },
        {
          "method": "GET",
          "path": "/healthz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/health.controller.ts",
          "line": 4,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/leaderboard",
      "server_defs": [
        {
          "method": "GET",
          "path": "/leaderboard",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/leaderboard/controllers/leaderboard.controller.ts",
          "line": 10,
          "snippet": "import { LeaderboardEntry } from '../entities/leaderboard.entity';\n\n@Controller('leaderboard')\nexport class LeaderboardController {\n  constructor(private readonly leaderboardService: LeaderboardService) {}\n\n  @Get()\n  async getLeaderboard(): Promise<LeaderboardEntry[]> {\n    return this.leaderboardService.getLeaderboard();\n  }\n\n  @Get(':userId')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/leaderboard/:userId",
      "server_defs": [
        {
          "method": "GET",
          "path": "/leaderboard/:userId",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/leaderboard/controllers/leaderboard.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async getLeaderboard(): Promise<LeaderboardEntry[]> {\n    return this.leaderboardService.getLeaderboard();\n  }\n\n  @Get(':userId')\n  async getUserLeaderboard(@Param('userId') userId: number): Promise<LeaderboardEntry[]> {\n    return this.leaderboardService.findByUser(Number(userId));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/live",
      "server_defs": [
        {
          "method": "GET",
          "path": "/live",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/live/controllers/live.controller.ts",
          "line": 10,
          "snippet": "import { Live } from '../entities/live.entity';\n\n@Controller('live')\nexport class LiveController {\n  constructor(private readonly liveService: LiveService) {}\n\n  @Get()\n  async findAll(): Promise<Live[]> {\n    return this.liveService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/live/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/live/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/live/controllers/live.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Live[]> {\n    return this.liveService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Live> {\n    return this.liveService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/marketplace",
      "server_defs": [
        {
          "method": "GET",
          "path": "/marketplace",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/marketplace/controllers/marketplace.controller.ts",
          "line": 10,
          "snippet": "import { Marketplace } from '../entities/marketplace.entity';\n\n@Controller('marketplace')\nexport class MarketplaceController {\n  constructor(private readonly marketplaceService: MarketplaceService) {}\n\n  @Get()\n  async findAll(): Promise<Marketplace[]> {\n    return this.marketplaceService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/marketplace",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/marketplace/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Marketplace() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/marketplace').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>marketplace — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/marketplace",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/marketplace/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Marketplace() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/marketplace').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>marketplace — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/marketplace/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/marketplace/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/marketplace/controllers/marketplace.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Marketplace[]> {\n    return this.marketplaceService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Marketplace> {\n    return this.marketplaceService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/meals",
      "server_defs": [
        {
          "method": "GET",
          "path": "/meals",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/nutrition/controllers/nutrition.controller.ts",
          "line": 10,
          "snippet": "import { Meal } from '../entities/meal.entity';\n\n@Controller('meals')\nexport class NutritionController {\n  constructor(private readonly nutritionService: NutritionService) {}\n\n  @Get()\n  async findAll(): Promise<Meal[]> {\n    return this.nutritionService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/meals/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/meals/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/nutrition/controllers/nutrition.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Meal[]> {\n    return this.nutritionService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Meal> {\n    return this.nutritionService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "server_defs": [
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/metrics/metrics.controller.ts",
          "line": 10,
          "snippet": "\n@Controller()\nexport class MetricsController {\n  constructor(private readonly metrics: MetricsService){}\n\n  @UseGuards(MetricsGuard)\n  @Get('/metrics')\n  @Header('Content-Type', 'text/plain; version=0.0.4')\n  async metricsEndpoint(){ return this.metrics.getMetrics(); }\n}"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/health.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/metrics/metrics.controller.ts",
          "line": 7,
          "snippet": "import { Controller, Get } from '@nestjs/common';\nimport * as client from 'prom-client';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller('metrics')\nexport class MetricsController {\n  @Get()\n  async metrics() { return register.metrics(); }\n}"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/health.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/health.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/health.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/main.ts",
          "line": 17,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/health.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/main.ts",
          "line": 15,
          "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
        },
        {
          "method": "GET",
          "path": "/metrics",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/metrics/metrics.controller.ts",
          "line": 6,
          "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/monitoring",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/monitoring",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/monitoring/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>monitoring — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/monitoring",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/monitoring/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>monitoring — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/notifications",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/notifications",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/notifications/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>notifications — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/notifications",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/notifications/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>notifications — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/notifications/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/notifications/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
          "line": 26,
          "snippet": "\n  @Post('push')\n  queuePush(@Body() dto: any) {\n    return this.svc.queuePush(dto.to, dto.body);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.findById(id);\n  }\n}"
        },
        {
          "method": "GET",
          "path": "/notifications/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
          "line": 23,
          "snippet": "\n  @Post('push')\n  sendPush(@Body() dto: {token: string; title: string; body: string; data?: any}) {\n    return this.svc.sendPush(dto);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/notifications/:userId",
      "server_defs": [
        {
          "method": "GET",
          "path": "/notifications/:userId",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/notifications/controllers/notifications.controller.ts",
          "line": 11,
          "snippet": "import { Notification } from '../entities/notification.entity';\n\n@Controller('notifications')\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  @Get(':userId')\n  async findAll(@Param('userId') userId: number): Promise<Notification[]> {\n    return this.notificationsService.findAllByUser(Number(userId));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/nutrition",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/nutrition",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/nutrition/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>nutrition — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/nutrition",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/nutrition/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>nutrition — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/payments",
      "server_defs": [
        {
          "method": "GET",
          "path": "/payments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/payments.controller.ts",
          "line": 26,
          "snippet": "  @HttpCode(HttpStatus.CREATED)\n  async create(@Body() body: CreatePaymentDto, @Headers('Idempotency-Key') idem?: string) {\n    const res = await (this.payments as any).create({ ...body, idempotencyKey: body.idempotencyKey || idem || undefined });\n    return { ok: true, data: res };\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  async listMine(@Query() q: ListPaymentsDto, @Headers('x-user-id') xUser?: string) limit = '20', @Query('cursor') cursor?: string, @Headers('x-user-id') xUser?: string) {\n    // Try to read from auth context if available; fallback to header for demo\n    const userId = xUser || 'demo-user';\n    if (typeof (this.payments as any).listByUser === 'function') {"
        },
        {
          "method": "GET",
          "path": "/payments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/controllers/payments.controller.ts",
          "line": 12,
          "snippet": " *  Exposes REST endpoints for listing and verifying payments.\n */\n@Controller('payments')\nexport class PaymentsController {\n  constructor(private readonly paymentsService: PaymentsService) {}\n\n  @Get()\n  async findAll(): Promise<Payment[]> {\n    return this.paymentsService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/payments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/payments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Payments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/payments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>payments — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/payments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/payments/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Payments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/payments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>payments — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/payments/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/payments/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/controllers/payments.controller.ts",
          "line": 17,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Payment[]> {\n    return this.paymentsService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise<Payment> {\n    return this.paymentsService.findOne(id);\n  }\n\n  @Get('verify/callback')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/payments/orders/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/payments/orders/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 34,
          "snippet": "  // Orders\n  @Post('orders')\n  createOrder(@Body() dto: any) {\n    return this.svc.createOrder(dto.userId, dto.productId, dto.couponCode);\n  }\n\n  @Get('orders/:id')\n  getOrder(@Param('id') id: string) {\n    return this.svc.getOrder(id);\n  }\n\n  // Payment Intent"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/payments/products",
      "server_defs": [
        {
          "method": "GET",
          "path": "/payments/products",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 17,
          "snippet": "  // Products\n  @Post('products')\n  createProduct(@Body() dto: any) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  // Coupons"
        },
        {
          "method": "GET",
          "path": "/payments/products",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
          "line": 13,
          "snippet": "\n  @Post('products')\n  createProduct(@Body() dto: {name: string; priceCents: number; currency?: string}) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  @Post('orders')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/payments/verify/callback",
      "server_defs": [
        {
          "method": "GET",
          "path": "/payments/verify/callback",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/controllers/payments.controller.ts",
          "line": 22,
          "snippet": "\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise<Payment> {\n    return this.paymentsService.findOne(id);\n  }\n\n  @Get('verify/callback')\n  async verifyCallback(@Query('Authority') authority: string, @Query('Amount') amount: string): Promise<{ success: boolean }> {\n    const ok = await this.paymentsService.verify(authority, Number(amount));\n    return { success: ok };\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/payrolls",
      "server_defs": [
        {
          "method": "GET",
          "path": "/payrolls",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payroll/controllers/payroll.controller.ts",
          "line": 10,
          "snippet": "import { Payroll } from '../entities/payroll.entity';\n\n@Controller('payrolls')\nexport class PayrollController {\n  constructor(private readonly payrollService: PayrollService) {}\n\n  @Get()\n  async findAll(): Promise<Payroll[]> {\n    return this.payrollService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/payrolls/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/payrolls/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payroll/controllers/payroll.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Payroll[]> {\n    return this.payrollService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Payroll> {\n    return this.payrollService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/physio",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/physio",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/physio/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>physio — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/physio",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/physio/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>physio — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/ready",
      "server_defs": [
        {
          "method": "GET",
          "path": "/ready",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/health.controller.ts",
          "line": 7,
          "snippet": "\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class HealthController {\n  @Get('/healthz') health(){ return { ok: true }; }\n  @Get('/ready') ready(){ return { ready: true }; }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/readyz",
      "server_defs": [
        {
          "method": "GET",
          "path": "/readyz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/common/controllers/health.controller.ts",
          "line": 8,
          "snippet": "\n@Controller()\nexport class HealthController {\n  @Get('/healthz')\n  health() { return { ok: true }; }\n\n  @Get('/readyz')\n  ready() { return { ok: true }; }\n}"
        },
        {
          "method": "GET",
          "path": "/readyz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/health.controller.ts",
          "line": 5,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/readyz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/health.controller.ts",
          "line": 5,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/readyz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/health.controller.ts",
          "line": 5,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/readyz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/health.controller.ts",
          "line": 5,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        },
        {
          "method": "GET",
          "path": "/readyz",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/health.controller.ts",
          "line": 5,
          "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/rewards",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/rewards",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/rewards/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>rewards — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/rewards",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/rewards/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>rewards — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/security/audit",
      "server_defs": [
        {
          "method": "GET",
          "path": "/security/audit",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/security/controllers/security.controller.ts",
          "line": 9,
          "snippet": "import { SecurityService } from '../security.service';\n\n@Controller('security')\nexport class SecurityController {\n  constructor(private readonly securityService: SecurityService) {}\n\n  @Get('audit')\n  getAuditLog() {\n    return this.securityService.auditLog;\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/surveys",
      "server_defs": [
        {
          "method": "GET",
          "path": "/surveys",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/survey/controllers/survey.controller.ts",
          "line": 10,
          "snippet": "import { Survey } from '../entities/survey.entity';\n\n@Controller('surveys')\nexport class SurveyController {\n  constructor(private readonly surveyService: SurveyService) {}\n\n  @Get()\n  async findAll(): Promise<Survey[]> {\n    return this.surveyService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/surveys/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/surveys/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/survey/controllers/survey.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Survey[]> {\n    return this.surveyService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Survey> {\n    return this.surveyService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/tickets",
      "server_defs": [
        {
          "method": "GET",
          "path": "/tickets",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/support/controllers/support.controller.ts",
          "line": 10,
          "snippet": "import { Support } from '../entities/support.entity';\n\n@Controller('tickets')\nexport class SupportController {\n  constructor(private readonly supportService: SupportService) {}\n\n  @Get()\n  async findAll(): Promise<Support[]> {\n    return this.supportService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/tickets/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/tickets/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/support/controllers/support.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<Support[]> {\n    return this.supportService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Support> {\n    return this.supportService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/users",
      "server_defs": [
        {
          "method": "GET",
          "path": "/users",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/users/controllers/users.controller.ts",
          "line": 10,
          "snippet": "import { User } from '../entities/user.entity';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  async findAll(): Promise<User[]> {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/users/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/users/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/users/controllers/users.controller.ts",
          "line": 15,
          "snippet": "\n  @Get()\n  async findAll(): Promise<User[]> {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<User> {\n    return this.usersService.findOne(Number(id));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/vip",
      "server_defs": [],
      "client_uses": [
        {
          "method": "GET",
          "url": "/vip",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/vip/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>vip — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/vip",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/vip/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>vip — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "UNRESOLVED_CLIENT_CALL"
    },
    {
      "method": "GET",
      "path": "/wallets/:userId",
      "server_defs": [
        {
          "method": "GET",
          "path": "/wallets/:userId",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/wallet/controllers/wallet.controller.ts",
          "line": 10,
          "snippet": "import { Wallet } from '../entities/wallet.entity';\n\n@Controller('wallets')\nexport class WalletController {\n  constructor(private readonly walletService: WalletService) {}\n\n  @Get(':userId')\n  async getWallet(@Param('userId') userId: number): Promise<Wallet> {\n    return this.walletService.findOne(Number(userId));\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "GET",
      "path": "/workouts",
      "server_defs": [
        {
          "method": "GET",
          "path": "/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/workouts/controllers/workouts.controller.ts",
          "line": 9,
          "snippet": "import { Workout as PrismaWorkout } from '@prisma/client';\n\n@Controller('workouts')\nexport class WorkoutsController {\n  constructor(private readonly workoutsService: WorkoutsService) {}\n\n  @Get()\n  findAll(): Promise<PrismaWorkout[]> {\n    return this.workoutsService.findAll();\n  }\n\n  @Get(':id')"
        },
        {
          "method": "GET",
          "path": "/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
          "line": 11,
          "snippet": "@ApiTags('workouts')\n@ApiBearerAuth()\n@Controller('workouts')\nexport class Workouts_serviceController {\n  constructor(private readonly svc: WorkoutsService) {}\n\n  @Get()\n  list(@Query('q') q?: string) {\n    return this.svc.list(q);\n  }\n\n  @Post()"
        },
        {
          "method": "GET",
          "path": "/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts/workouts.controller.ts",
          "line": 8,
          "snippet": "import { WorkoutsService } from './workouts.service';\n\n@Controller('workouts')\nexport class WorkoutsController {\n  constructor(private readonly svc: WorkoutsService) {}\n\n  @Get()\n  list(@Query('q') q?: string) {\n    return this.svc.list(q);\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [
        {
          "method": "GET",
          "url": "/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/workouts/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Workouts() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/workouts').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>workouts — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        },
        {
          "method": "GET",
          "url": "/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/workouts/index.tsx",
          "line": 5,
          "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Workouts() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/workouts').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>workouts — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
        }
      ],
      "status": "USED_BY_CLIENT"
    },
    {
      "method": "GET",
      "path": "/workouts/:id",
      "server_defs": [
        {
          "method": "GET",
          "path": "/workouts/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/workouts/controllers/workouts.controller.ts",
          "line": 14,
          "snippet": "\n  @Get()\n  findAll(): Promise<PrismaWorkout[]> {\n    return this.workoutsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise<PrismaWorkout> {\n    return this.workoutsService.findOne(Number(id));\n  }\n}"
        },
        {
          "method": "GET",
          "path": "/workouts/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
          "line": 21,
          "snippet": "\n  @Post()\n  create(@Body() dto: any) {\n    return this.svc.create(dto);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Put(':id')"
        },
        {
          "method": "GET",
          "path": "/workouts/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts/workouts.controller.ts",
          "line": 13,
          "snippet": "\n  @Get()\n  list(@Query('q') q?: string) {\n    return this.svc.list(q);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Post()"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/",
      "server_defs": [
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/auth.controller.ts",
          "line": 12,
          "snippet": "\n/** REST Auth endpoints */\n@Controller()\nexport class AuthController {\n  constructor(private readonly auth: AuthUseCase) {}\n\n  @Post(API_ROUTES.AUTH.LOGIN)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.username, dto.password);\n  }\n"
        },
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/auth.controller.ts",
          "line": 18,
          "snippet": "  @Post(API_ROUTES.AUTH.LOGIN)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.username, dto.password);\n  }\n\n  @Post(API_ROUTES.AUTH.REFRESH)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  refresh(@Body() dto: RefreshDto) {\n    return this.auth.refresh(dto.token);\n  }\n}"
        },
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/payments.controller.ts",
          "line": 13,
          "snippet": "\n/** REST Payments endpoints */\n@Controller()\nexport class PaymentsController {\n  constructor(private readonly payments: PaymentsUseCase) {}\n\n  @Post(API_ROUTES.PAYMENTS.ROOT)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  async create(\n    @Headers('x-user-id') userId: string,\n    @Headers('idempotency-key') idemKey: string | undefined,\n    @Body() dto: CreatePaymentDto,"
        },
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
          "line": 8,
          "snippet": "import { RewardsService } from './rewards.service'\n@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
          "line": 8,
          "snippet": "import { PhysioService } from './physio.service'\n@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
          "line": 8,
          "snippet": "import { AssessmentsService } from './assessments.service'\n@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
          "line": 8,
          "snippet": "import { AnalyticsService } from './analytics.service'\n@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "POST",
          "path": "/",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
          "line": 8,
          "snippet": "import { BookingService } from './booking.service'\n@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/admin/login",
      "server_defs": [
        {
          "method": "POST",
          "path": "/admin/login",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/admin.controller.ts",
          "line": 22,
          "snippet": "  return users.find((x) => x.u === username);\n}\n\n@Controller('admin')\n@UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\nexport class AdminController {\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  login(@Body() body: AdminLoginDto) {\n    const secret = process.env.ADMIN_JWT_SECRET;\n    const usersRaw = process.env.ADMIN_USERS_JSON || '[]';\n    if (!secret) throw new UnauthorizedException('admin jwt not configured');"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/login",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/login",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/auth.controller.ts",
          "line": 17,
          "snippet": "\n@Controller('auth') // see API_ROUTES.auth\n@UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true, forbidNonWhitelisted: true }))\nexport class AuthController {\n  constructor(private readonly auth: AuthService) {}\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(@Body() body: LoginDto) {\n    const tokens = await this.auth.login(body);\n    return { ok: true, data: tokens };\n  }"
        },
        {
          "method": "POST",
          "path": "/auth/login",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
          "line": 15,
          "snippet": "\n  @Post('register')\n  async register(@Body() dto: RegisterDto) {\n    return this.auth.register(dto.email, dto.password);\n  }\n\n  @Post('login')\n  async login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.email, dto.password);\n  }\n\n  @Post('refresh')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/logout",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/logout",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/auth.controller.ts",
          "line": 31,
          "snippet": "  @HttpCode(HttpStatus.OK)\n  async refresh(@Body() body: RefreshDto) {\n    const tokens = await this.auth.refresh(body.refreshToken);\n    return { ok: true, data: tokens };\n  }\n\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout() {\n    // stateless logout — clients should delete tokens; optional server-side blacklist could be added later\n    return { ok: true };\n  }"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/password/confirm",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/password/confirm",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/password-reset.controller.ts",
          "line": 16,
          "snippet": "\n  @Post('request')\n  async request(@Body() dto: RequestDto) {\n    return this.svc.request(dto.email);\n  }\n\n  @Post('confirm')\n  async confirm(@Body() dto: ConfirmDto) {\n    return this.svc.confirm(dto.email, dto.token, dto.newPassword);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/password/request",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/password/request",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/password-reset.controller.ts",
          "line": 11,
          "snippet": "class ConfirmDto { email: string; token: string; newPassword: string; }\n\n@Controller('auth/password')\nexport class PasswordResetController {\n  constructor(private readonly svc: PasswordResetService) {}\n\n  @Post('request')\n  async request(@Body() dto: RequestDto) {\n    return this.svc.request(dto.email);\n  }\n\n  @Post('confirm')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/refresh",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/refresh",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/auth.controller.ts",
          "line": 24,
          "snippet": "  @HttpCode(HttpStatus.OK)\n  async login(@Body() body: LoginDto) {\n    const tokens = await this.auth.login(body);\n    return { ok: true, data: tokens };\n  }\n\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  async refresh(@Body() body: RefreshDto) {\n    const tokens = await this.auth.refresh(body.refreshToken);\n    return { ok: true, data: tokens };\n  }"
        },
        {
          "method": "POST",
          "path": "/auth/refresh",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
          "line": 20,
          "snippet": "\n  @Post('login')\n  async login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.email, dto.password);\n  }\n\n  @Post('refresh')\n  @UseGuards(JwtAuthGuard)\n  async refresh(@Req() req: any, @Body() dto: RefreshDto) {\n    return this.auth.refresh(req.user.sub, dto.refreshToken);\n  }\n"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/register",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/register",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
          "line": 10,
          "snippet": "import { JwtAuthGuard } from './jwt.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly auth: AuthService) {}\n\n  @Post('register')\n  async register(@Body() dto: RegisterDto) {\n    return this.auth.register(dto.email, dto.password);\n  }\n\n  @Post('login')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/totp/disable",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/totp/disable",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/totp.controller.ts",
          "line": 22,
          "snippet": "\n  @Post('verify')\n  async verify(@Req() req: any, @Body() dto: VerifyDto) {\n    return this.totp.verify(req.user.sub, dto.code);\n  }\n\n  @Post('disable')\n  async disable(@Req() req: any) {\n    return this.totp.disable(req.user.sub);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/totp/enable",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/totp/enable",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/totp.controller.ts",
          "line": 12,
          "snippet": "\n@Controller('auth/totp')\n@UseGuards(JwtAuthGuard)\nexport class TotpController {\n  constructor(private readonly totp: TotpService) {}\n\n  @Post('enable')\n  async enable(@Req() req: any) {\n    return this.totp.enable(req.user.sub);\n  }\n\n  @Post('verify')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/auth/totp/verify",
      "server_defs": [
        {
          "method": "POST",
          "path": "/auth/totp/verify",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/totp.controller.ts",
          "line": 17,
          "snippet": "\n  @Post('enable')\n  async enable(@Req() req: any) {\n    return this.totp.enable(req.user.sub);\n  }\n\n  @Post('verify')\n  async verify(@Req() req: any, @Body() dto: VerifyDto) {\n    return this.totp.verify(req.user.sub, dto.code);\n  }\n\n  @Post('disable')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/cert/issue",
      "server_defs": [
        {
          "method": "POST",
          "path": "/cert/issue",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/certificate/certificate.controller.ts",
          "line": 10,
          "snippet": "import { CertificateService } from './certificate.service';\n\n@Controller('cert')\nexport class CertificateController {\n  constructor(private readonly svc: CertificateService) {}\n\n  @Post('issue')\n  @Roles('admin')\n  @UseGuards(RolesGuard)\n  async issue(@Body() body: any) {\n    return this.svc.issueCertificate(body);\n  }"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/live/egress/start",
      "server_defs": [
        {
          "method": "POST",
          "path": "/live/egress/start",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
          "line": 25,
          "snippet": "\n  @Post('room/delete')\n  async delete(@Body() body: { room: string }) {\n    return this.live.deleteRoom(body.room);\n  }\n\n  @Post('egress/start')\n  async startEgress(@Body() body: { room: string; filepath?: string; livestreamUrl?: string }) {\n    return this.live.startCompositeEgress(body.room, { filepath: body.filepath, livestreamUrl: body.livestreamUrl });\n  }\n\n  @Post('egress/stop')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/live/egress/stop",
      "server_defs": [
        {
          "method": "POST",
          "path": "/live/egress/stop",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
          "line": 30,
          "snippet": "\n  @Post('egress/start')\n  async startEgress(@Body() body: { room: string; filepath?: string; livestreamUrl?: string }) {\n    return this.live.startCompositeEgress(body.room, { filepath: body.filepath, livestreamUrl: body.livestreamUrl });\n  }\n\n  @Post('egress/stop')\n  async stopEgress(@Body() body: { egressId: string }) {\n    return this.live.stopEgress(body.egressId);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/live/room/create",
      "server_defs": [
        {
          "method": "POST",
          "path": "/live/room/create",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
          "line": 15,
          "snippet": "  @HttpCode(HttpStatus.OK)\n  issueToken(@Body() body: { room: string; identity: string; role?: LiveRole; ttlSeconds?: number }) {\n    const role: LiveRole = body.role ?? 'viewer';\n    return this.live.issueToken({ room: body.room, identity: body.identity, role, ttlSeconds: body.ttlSeconds });\n  }\n\n  @Post('room/create')\n  async create(@Body() body: { room: string }) {\n    return this.live.createRoom(body.room);\n  }\n\n  @Post('room/delete')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/live/room/delete",
      "server_defs": [
        {
          "method": "POST",
          "path": "/live/room/delete",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
          "line": 20,
          "snippet": "\n  @Post('room/create')\n  async create(@Body() body: { room: string }) {\n    return this.live.createRoom(body.room);\n  }\n\n  @Post('room/delete')\n  async delete(@Body() body: { room: string }) {\n    return this.live.deleteRoom(body.room);\n  }\n\n  @Post('egress/start')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/live/token",
      "server_defs": [
        {
          "method": "POST",
          "path": "/live/token",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
          "line": 8,
          "snippet": "import { LivekitService, LiveRole } from './livekit.service';\n\n@Controller('live')\nexport class LivekitController {\n  constructor(private readonly live: LivekitService) {}\n\n  @Post('token')\n  @HttpCode(HttpStatus.OK)\n  issueToken(@Body() body: { room: string; identity: string; role?: LiveRole; ttlSeconds?: number }) {\n    const role: LiveRole = body.role ?? 'viewer';\n    return this.live.issueToken({ room: body.room, identity: body.identity, role, ttlSeconds: body.ttlSeconds });\n  }"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/media/confirm",
      "server_defs": [
        {
          "method": "POST",
          "path": "/media/confirm",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/media/media-upload.controller.ts",
          "line": 7,
          "snippet": "import { requireEnv } from '../common/utils/nulls';\nimport { Body, Controller, Post } from '@nestjs/common';\nimport { ConfirmUploadDto } from './dto/confirm-upload.dto';\n\n@Controller('media')\nexport class MediaUploadController {\n  @Post('confirm')\n  async confirm(@Body() body: ConfirmUploadDto) {\n    const bucket = body.bucket || requireEnv('S3_BUCKET');\n    // اینجا منطق ذخیره در دیتابیس/صف را بگذارید\n    return { ok: true, bucket, key: body.key };\n  }"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/notifications/email",
      "server_defs": [
        {
          "method": "POST",
          "path": "/notifications/email",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
          "line": 11,
          "snippet": "@ApiTags('notifications')\n@ApiBearerAuth()\n@Controller('notifications')\nexport class Notifications_serviceController {\n  constructor(private readonly svc: NotificationsService) {}\n\n  @Post('email')\n  queueEmail(@Body() dto: any) {\n    return this.svc.queueEmail(dto.to, dto.subject, dto.body);\n  }\n\n  @Post('sms')"
        },
        {
          "method": "POST",
          "path": "/notifications/email",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
          "line": 8,
          "snippet": "import { NotificationsService } from './notifications.service';\n\n@Controller('notifications')\nexport class NotificationsController {\n  constructor(private readonly svc: NotificationsService) {}\n\n  @Post('email')\n  sendEmail(@Body() dto: {to: string; subject: string; html: string}) {\n    return this.svc.sendEmail(dto);\n  }\n\n  @Post('sms')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/notifications/push",
      "server_defs": [
        {
          "method": "POST",
          "path": "/notifications/push",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
          "line": 21,
          "snippet": "\n  @Post('sms')\n  queueSms(@Body() dto: any) {\n    return this.svc.queueSms(dto.to, dto.body);\n  }\n\n  @Post('push')\n  queuePush(@Body() dto: any) {\n    return this.svc.queuePush(dto.to, dto.body);\n  }\n\n  @Get(':id')"
        },
        {
          "method": "POST",
          "path": "/notifications/push",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
          "line": 18,
          "snippet": "\n  @Post('sms')\n  sendSms(@Body() dto: {to: string; body: string}) {\n    return this.svc.sendSms(dto);\n  }\n\n  @Post('push')\n  sendPush(@Body() dto: {token: string; title: string; body: string; data?: any}) {\n    return this.svc.sendPush(dto);\n  }\n\n  @Get(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/notifications/sms",
      "server_defs": [
        {
          "method": "POST",
          "path": "/notifications/sms",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
          "line": 16,
          "snippet": "\n  @Post('email')\n  queueEmail(@Body() dto: any) {\n    return this.svc.queueEmail(dto.to, dto.subject, dto.body);\n  }\n\n  @Post('sms')\n  queueSms(@Body() dto: any) {\n    return this.svc.queueSms(dto.to, dto.body);\n  }\n\n  @Post('push')"
        },
        {
          "method": "POST",
          "path": "/notifications/sms",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
          "line": 13,
          "snippet": "\n  @Post('email')\n  sendEmail(@Body() dto: {to: string; subject: string; html: string}) {\n    return this.svc.sendEmail(dto);\n  }\n\n  @Post('sms')\n  sendSms(@Body() dto: {to: string; body: string}) {\n    return this.svc.sendSms(dto);\n  }\n\n  @Post('push')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/payments.controller.ts",
          "line": 19,
          "snippet": "@Controller('payments') // see API_ROUTES.payments\n@UseGuards(JwtAuthGuard)\n@UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true, forbidNonWhitelisted: true }))\nexport class PaymentsController {\n  constructor(private readonly payments: PaymentsService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async create(@Body() body: CreatePaymentDto, @Headers('Idempotency-Key') idem?: string) {\n    const res = await (this.payments as any).create({ ...body, idempotencyKey: body.idempotencyKey || idem || undefined });\n    return { ok: true, data: res };\n  }"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments/coupons",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments/coupons",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 23,
          "snippet": "  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  // Coupons\n  @Post('coupons')\n  createCoupon(@Body() dto: any) {\n    return this.svc.createCoupon(dto.code, dto.percentOff);\n  }\n\n  // Orders"
        },
        {
          "method": "POST",
          "path": "/payments/coupons",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
          "line": 39,
          "snippet": "\n  @Post('subscriptions')\n  createSubscription(@Body() dto: {userId: string; productId: string}) {\n    return this.svc.createSubscription(dto);\n  }\n\n  @Post('coupons')\n  createCoupon(@Body() dto: {code: string; percentOff: number}) {\n    return this.svc.createCoupon(dto);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments/intent/:orderId",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments/intent/:orderId",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 40,
          "snippet": "  @Get('orders/:id')\n  getOrder(@Param('id') id: string) {\n    return this.svc.getOrder(id);\n  }\n\n  // Payment Intent\n  @Post('intent/:orderId')\n  createIntent(@Param('orderId') orderId: string) {\n    return this.svc.createIntent(orderId);\n  }\n\n  // Webhook (raw body)"
        },
        {
          "method": "POST",
          "path": "/payments/intent/:orderId",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
          "line": 23,
          "snippet": "\n  @Post('orders')\n  createOrder(@Body() dto: {userId: string; productId: string; couponCode?: string}) {\n    return this.svc.createOrder(dto);\n  }\n\n  @Post('intent/:orderId')\n  createPaymentIntent(@Param('orderId') orderId: string) {\n    return this.svc.createPaymentIntent(orderId);\n  }\n\n  @Post('webhook')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments/orders",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments/orders",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 29,
          "snippet": "  @Post('coupons')\n  createCoupon(@Body() dto: any) {\n    return this.svc.createCoupon(dto.code, dto.percentOff);\n  }\n\n  // Orders\n  @Post('orders')\n  createOrder(@Body() dto: any) {\n    return this.svc.createOrder(dto.userId, dto.productId, dto.couponCode);\n  }\n\n  @Get('orders/:id')"
        },
        {
          "method": "POST",
          "path": "/payments/orders",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
          "line": 18,
          "snippet": "\n  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  @Post('orders')\n  createOrder(@Body() dto: {userId: string; productId: string; couponCode?: string}) {\n    return this.svc.createOrder(dto);\n  }\n\n  @Post('intent/:orderId')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments/plans",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments/plans",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 52,
          "snippet": "  @Post('webhook')\n  webhook(@Req() req: any, @Headers('stripe-signature') sig?: string) {\n    return this.svc.handleWebhook(req.rawBody || req.body, sig);\n  }\n\n  // Subscriptions\n  @Post('plans')\n  createPlan(@Body() dto: any) {\n    return this.svc.createPlan(dto.productId, dto.interval, dto.priceCents, dto.trialDays);\n  }\n\n  @Post('subscriptions')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments/products",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments/products",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 12,
          "snippet": "@ApiBearerAuth()\n@Controller('payments')\nexport class Payments_serviceController {\n  constructor(private readonly svc: PaymentsService) {}\n\n  // Products\n  @Post('products')\n  createProduct(@Body() dto: any) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')"
        },
        {
          "method": "POST",
          "path": "/payments/products",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
          "line": 8,
          "snippet": "import { PaymentsService } from './payments.service';\n\n@Controller('payments')\nexport class PaymentsController {\n  constructor(private readonly svc: PaymentsService) {}\n\n  @Post('products')\n  createProduct(@Body() dto: {name: string; priceCents: number; currency?: string}) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments/subscriptions",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments/subscriptions",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 57,
          "snippet": "  // Subscriptions\n  @Post('plans')\n  createPlan(@Body() dto: any) {\n    return this.svc.createPlan(dto.productId, dto.interval, dto.priceCents, dto.trialDays);\n  }\n\n  @Post('subscriptions')\n  subscribe(@Body() dto: any) {\n    return this.svc.subscribe(dto.userId, dto.planId);\n  }\n}"
        },
        {
          "method": "POST",
          "path": "/payments/subscriptions",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
          "line": 34,
          "snippet": "  @Post('webhook')\n  webhook(@Req() req: any) {\n    // raw body expected: ensure main.ts uses raw body for this route\n    return this.svc.handleWebhook(req.headers['stripe-signature'], req.rawBody);\n  }\n\n  @Post('subscriptions')\n  createSubscription(@Body() dto: {userId: string; productId: string}) {\n    return this.svc.createSubscription(dto);\n  }\n\n  @Post('coupons')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/payments/webhook",
      "server_defs": [
        {
          "method": "POST",
          "path": "/payments/webhook",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/webhook.controller.ts",
          "line": 14,
          "snippet": "  private verifySignature(rawBody: string, sigHeader: string|undefined, secret: string) {\n    if (!sigHeader) return false;\n    const h = crypto.createHmac('sha256', secret).update(rawBody).digest('hex');\n    return crypto.timingSafeEqual(Buffer.from(h), Buffer.from(sigHeader));\n  }\n\n  @Post('webhook')\n  async handle(@Req() req, @Res() res) {\n    const secret = process.env.PAYMENT_WEBHOOK_SECRET || '';\n    const sig = req.headers['x-signature'] as string | undefined;\n    const raw = (req as any).rawBody || JSON.stringify(req.body || {});\n    if (!secret || !this.verifySignature(raw, sig, secret)) {"
        },
        {
          "method": "POST",
          "path": "/payments/webhook",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
          "line": 46,
          "snippet": "  @Post('intent/:orderId')\n  createIntent(@Param('orderId') orderId: string) {\n    return this.svc.createIntent(orderId);\n  }\n\n  // Webhook (raw body)\n  @Post('webhook')\n  webhook(@Req() req: any, @Headers('stripe-signature') sig?: string) {\n    return this.svc.handleWebhook(req.rawBody || req.body, sig);\n  }\n\n  // Subscriptions"
        },
        {
          "method": "POST",
          "path": "/payments/webhook",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
          "line": 28,
          "snippet": "\n  @Post('intent/:orderId')\n  createPaymentIntent(@Param('orderId') orderId: string) {\n    return this.svc.createPaymentIntent(orderId);\n  }\n\n  @Post('webhook')\n  webhook(@Req() req: any) {\n    // raw body expected: ensure main.ts uses raw body for this route\n    return this.svc.handleWebhook(req.headers['stripe-signature'], req.rawBody);\n  }\n"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/reservations/cancel",
      "server_defs": [
        {
          "method": "POST",
          "path": "/reservations/cancel",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/reservations/reservations.controller.ts",
          "line": 22,
          "snippet": "      const r = await this.reservations.reserve(body.userId, body.slotId);\n      reservationsCreated.inc({ status: 'ok' });\n      return { ok: true, reservation: { id: r.id, slotId: r.slotId } };\n    });\n  }\n\n  @Post('cancel')\n  async cancel(@Body() body: any) {\n    return await withSpan('reservations.cancel', { 'reservation.id': body.reservationId }, async () => {\n      const r = await this.reservations.cancel(body.reservationId);\n      reservationsCreated.inc({ status: 'cancel' });\n      return { ok: true, reservation: { id: r.id } };"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/reservations/reserve",
      "server_defs": [
        {
          "method": "POST",
          "path": "/reservations/reserve",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/reservations/reservations.controller.ts",
          "line": 12,
          "snippet": "\n@Controller('reservations')\nexport class ReservationsController {\n  private jwt = new JwtKidService();\n  constructor(private readonly reservations: ReservationService) {}\n\n  @Post('reserve')\n  async reserve(@Body() body: any) {\n    // Optional auth via JWT (if Authorization header provided)\n    return await withSpan('reservations.reserve', { 'user.id': body.userId, 'slot.id': body.slotId }, async () => {\n      const r = await this.reservations.reserve(body.userId, body.slotId);\n      reservationsCreated.inc({ status: 'ok' });"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "POST",
      "path": "/workouts",
      "server_defs": [
        {
          "method": "POST",
          "path": "/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
          "line": 16,
          "snippet": "\n  @Get()\n  list(@Query('q') q?: string) {\n    return this.svc.list(q);\n  }\n\n  @Post()\n  create(@Body() dto: any) {\n    return this.svc.create(dto);\n  }\n\n  @Get(':id')"
        },
        {
          "method": "POST",
          "path": "/workouts",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts/workouts.controller.ts",
          "line": 18,
          "snippet": "\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Post()\n  create(@Body() dto: {userId: string; title: string; level: 'beginner'|'intermediate'|'advanced'; goal: 'fatloss'|'strength'|'hypertrophy'; equipment?: string[]}) {\n    return this.svc.create(dto);\n  }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "server_defs": [
        {
          "method": "PUT",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
          "line": 9,
          "snippet": "@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "PUT",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
          "line": 9,
          "snippet": "@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "PUT",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
          "line": 9,
          "snippet": "@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "PUT",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
          "line": 9,
          "snippet": "@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        },
        {
          "method": "PUT",
          "path": "/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
          "line": 9,
          "snippet": "@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    },
    {
      "method": "PUT",
      "path": "/workouts/:id",
      "server_defs": [
        {
          "method": "PUT",
          "path": "/workouts/:id",
          "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
          "line": 26,
          "snippet": "\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() dto: any) {\n    return this.svc.update(id, dto);\n  }\n\n  @Delete(':id')"
        }
      ],
      "client_uses": [],
      "status": "UNUSED_SERVER_ROUTE"
    }
  ],
  "UNUSED_SERVER_ROUTES": [
    {
      "method": "DELETE",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
      "line": 10,
      "snippet": "export class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
      "line": 10,
      "snippet": "export class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
      "line": 10,
      "snippet": "export class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
      "line": 10,
      "snippet": "export class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
      "line": 10,
      "snippet": "export class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "DELETE",
      "path": "/workouts/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
      "line": 31,
      "snippet": "\n  @Put(':id')\n  update(@Param('id') id: string, @Body() dto: any) {\n    return this.svc.update(id, dto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.svc.delete(id);\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/payments.controller.ts",
      "line": 30,
      "snippet": "      amountCents: dto.amountCents,\n      currency: dto.currency,\n      idempotencyKey: idemKey || dto.idempotencyKey,\n    });\n  }\n\n  @Get(API_ROUTES.PAYMENTS.ROOT)\n  @UseInterceptors(CacheControlInterceptor)\n  @cacheControl('private, max-age=15, stale-while-revalidate=30')\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  async list(\n    @Headers('x-user-id') userId: string,"
    },
    {
      "method": "GET",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { RewardsService } from './rewards.service'\n@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { PhysioService } from './physio.service'\n@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AssessmentsService } from './assessments.service'\n@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AnalyticsService } from './analytics.service'\n@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { BookingService } from './booking.service'\n@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/.well-known/jwks.json",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/jwks.controller.ts",
      "line": 8,
      "snippet": "import { ConfigService } from '@nestjs/config';\nimport { signer } from '@arman/auth-kit';\n\n@Controller('.well-known')\nexport class JwksController {\n  constructor(private readonly config: ConfigService) {}\n  @Get('jwks.json')\n  async getJwks() {\n    const kid = process.env.JWT_KID || 'dev-1';\n    const alg = (process.env.JWT_ALG as any) || 'RS256';\n    const pem = process.env.JWKS_PRIVATE_PEM || '';\n    if (!pem) {"
    },
    {
      "method": "GET",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { RewardsService } from './rewards.service'\n@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { PhysioService } from './physio.service'\n@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AssessmentsService } from './assessments.service'\n@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { AnalyticsService } from './analytics.service'\n@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { BookingService } from './booking.service'\n@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "GET",
      "path": "/admins",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/admin/controllers/admin.controller.ts",
      "line": 10,
      "snippet": "import { Admin } from '../entities/admin.entity';\n\n@Controller('admins')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Get()\n  async findAll(): Promise<Admin[]> {\n    return this.adminService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/admins/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/admin/controllers/admin.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Admin[]> {\n    return this.adminService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Admin> {\n    return this.adminService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/auth/me",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
      "line": 26,
      "snippet": "  @Post('refresh')\n  @UseGuards(JwtAuthGuard)\n  async refresh(@Req() req: any, @Body() dto: RefreshDto) {\n    return this.auth.refresh(req.user.sub, dto.refreshToken);\n  }\n\n  @Get('me')\n  @UseGuards(JwtAuthGuard)\n  me(@Req() req: any) {\n    return { userId: req.user.sub, email: req.user.email };\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/bff-mobile/dashboard",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/bff-mobile/bff-mobile.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get, Query } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\n\n@Controller('bff-mobile')\nexport class BffMobileController {\n  constructor(private prisma: PrismaService) {}\n  @Get('dashboard')\n  async dashboard(@Query('userId') userId: string) {\n    const [workouts, notifications] = await Promise.all([\n      (this.prisma as any).workout.findMany({ where: { userId }, take: 3, orderBy: { date: 'desc' } }),\n      (this.prisma as any).notification?.findMany?.({ where: { userId }, take: 5, orderBy: { createdAt: 'desc' } }) || []\n    ]);"
    },
    {
      "method": "GET",
      "path": "/bff-web/home",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/bff-web/bff-web.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get, Query } from '@nestjs/common';\nimport { PrismaService } from '../database/prisma.service';\n\n@Controller('bff-web')\nexport class BffWebController {\n  constructor(private prisma: PrismaService) {}\n  @Get('home')\n  async home(@Query('userId') userId: string) {\n    const [user, workouts] = await Promise.all([\n      (this.prisma as any).user.findUnique({ where: { id: userId } }),\n      (this.prisma as any).workout.findMany({ where: { userId }, take: 5, orderBy: { date: 'desc' } }),\n    ]);"
    },
    {
      "method": "GET",
      "path": "/bff/dashboard",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/bff/bff.controller.ts",
      "line": 8,
      "snippet": "import { PrismaService } from '../database/prisma.service';\n\n@Controller('bff')\nexport class BffController {\n  constructor(private prisma: PrismaService) {}\n  // Aggregate few quick stats for dashboard in one request\n  @Get('dashboard')\n  async dashboard(@Query('userId') userId: string) {\n    const [workouts, upcoming, notifications] = await Promise.all([\n      (this.prisma as any).workout.count({ where: { userId } }),\n      (this.prisma as any).session?.findMany?.({ where: { userId, date: { gte: new Date() } }, take: 5 }) ?? [],\n      (this.prisma as any).notification?.findMany?.({ where: { userId }, take: 5 }) ?? [],"
    },
    {
      "method": "GET",
      "path": "/cert/verify",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/certificate/certificate.controller.ts",
      "line": 17,
      "snippet": "  @Roles('admin')\n  @UseGuards(RolesGuard)\n  async issue(@Body() body: any) {\n    return this.svc.issueCertificate(body);\n  }\n\n  @Get('verify')\n  verify(@Query('t') t: string) {\n    return this.svc.verify(t);\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/challenges",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/challenges/controllers/challenges.controller.ts",
      "line": 10,
      "snippet": "import { Challenge } from '../entities/challenge.entity';\n\n@Controller('challenges')\nexport class ChallengesController {\n  constructor(private readonly challengesService: ChallengesService) {}\n\n  @Get()\n  async findAll(): Promise<Challenge[]> {\n    return this.challengesService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/challenges/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/challenges/controllers/challenges.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Challenge[]> {\n    return this.challengesService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Challenge> {\n    return this.challengesService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/coaches/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/coaches/controllers/coaches.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Coach[]> {\n    return this.coachesService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Coach> {\n    return this.coachesService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/contents",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/cms/controllers/cms.controller.ts",
      "line": 10,
      "snippet": "import { Cms } from '../entities/cms.entity';\n\n@Controller('contents')\nexport class CmsController {\n  constructor(private readonly cmsService: CmsService) {}\n\n  @Get()\n  async findAll(): Promise<Cms[]> {\n    return this.cmsService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/contents/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/cms/controllers/cms.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Cms[]> {\n    return this.cmsService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Cms> {\n    return this.cmsService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/corporate",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/corporate/controllers/corporate.controller.ts",
      "line": 10,
      "snippet": "import { Corporate } from '../entities/corporate.entity';\n\n@Controller('corporate')\nexport class CorporateController {\n  constructor(private readonly corporateService: CorporateService) {}\n\n  @Get()\n  async findAll(): Promise<Corporate[]> {\n    return this.corporateService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/corporate/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/corporate/controllers/corporate.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Corporate[]> {\n    return this.corporateService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Corporate> {\n    return this.corporateService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/experiments",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/experiments/controllers/experiments.controller.ts",
      "line": 10,
      "snippet": "import { Experiment } from '../entities/experiment.entity';\n\n@Controller('experiments')\nexport class ExperimentsController {\n  constructor(private readonly experimentsService: ExperimentsService) {}\n\n  @Get()\n  async findAll(): Promise<Experiment[]> {\n    return this.experimentsService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/experiments/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/experiments/controllers/experiments.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Experiment[]> {\n    return this.experimentsService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Experiment> {\n    return this.experimentsService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/health/health.controller.ts",
      "line": 5,
      "snippet": "import { Controller, Get } from '@nestjs/common';\n\n@Controller('health')\nexport class HealthController {\n  @Get()\n  ping() {\n    return { ok: true, service: 'backend', ts: Date.now() };\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/health/health.controller.ts",
      "line": 4,
      "snippet": "import { Controller, Get } from '@nestjs/common';\n@Controller('health')\nexport class HealthController {\n  @Get()\n  liveness() { return { status: 'ok', ts: Date.now() }; }\n}"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/health",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/health/health.controller.ts",
      "line": 15,
      "snippet": "    private pg: PostgresHealthIndicator,\n    private redis: RedisHealthIndicator,\n    private rmq: RabbitMQHealthIndicator,\n    private minio: MinioHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    const db = process.env.DATABASE_URL || '';\n    const redis = process.env.REDIS_URL || '';\n    const rmq = process.env.RABBITMQ_URL || '';"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/common/controllers/health.controller.ts",
      "line": 5,
      "snippet": "import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class HealthController {\n  @Get('/healthz')\n  health() { return { ok: true }; }\n\n  @Get('/readyz')\n  ready() { return { ok: true }; }\n}"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/health.controller.ts",
      "line": 4,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/health.controller.ts",
      "line": 4,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/health.controller.ts",
      "line": 4,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/health.controller.ts",
      "line": 4,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/health.controller.ts",
      "line": 6,
      "snippet": "\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class HealthController {\n  @Get('/healthz') health(){ return { ok: true }; }\n  @Get('/ready') ready(){ return { ready: true }; }\n}"
    },
    {
      "method": "GET",
      "path": "/healthz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/health.controller.ts",
      "line": 4,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/leaderboard",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/leaderboard/controllers/leaderboard.controller.ts",
      "line": 10,
      "snippet": "import { LeaderboardEntry } from '../entities/leaderboard.entity';\n\n@Controller('leaderboard')\nexport class LeaderboardController {\n  constructor(private readonly leaderboardService: LeaderboardService) {}\n\n  @Get()\n  async getLeaderboard(): Promise<LeaderboardEntry[]> {\n    return this.leaderboardService.getLeaderboard();\n  }\n\n  @Get(':userId')"
    },
    {
      "method": "GET",
      "path": "/leaderboard/:userId",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/leaderboard/controllers/leaderboard.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async getLeaderboard(): Promise<LeaderboardEntry[]> {\n    return this.leaderboardService.getLeaderboard();\n  }\n\n  @Get(':userId')\n  async getUserLeaderboard(@Param('userId') userId: number): Promise<LeaderboardEntry[]> {\n    return this.leaderboardService.findByUser(Number(userId));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/live",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/live/controllers/live.controller.ts",
      "line": 10,
      "snippet": "import { Live } from '../entities/live.entity';\n\n@Controller('live')\nexport class LiveController {\n  constructor(private readonly liveService: LiveService) {}\n\n  @Get()\n  async findAll(): Promise<Live[]> {\n    return this.liveService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/live/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/live/controllers/live.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Live[]> {\n    return this.liveService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Live> {\n    return this.liveService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/marketplace/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/marketplace/controllers/marketplace.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Marketplace[]> {\n    return this.marketplaceService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Marketplace> {\n    return this.marketplaceService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/meals",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/nutrition/controllers/nutrition.controller.ts",
      "line": 10,
      "snippet": "import { Meal } from '../entities/meal.entity';\n\n@Controller('meals')\nexport class NutritionController {\n  constructor(private readonly nutritionService: NutritionService) {}\n\n  @Get()\n  async findAll(): Promise<Meal[]> {\n    return this.nutritionService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/meals/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/nutrition/controllers/nutrition.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Meal[]> {\n    return this.nutritionService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Meal> {\n    return this.nutritionService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/metrics/metrics.controller.ts",
      "line": 10,
      "snippet": "\n@Controller()\nexport class MetricsController {\n  constructor(private readonly metrics: MetricsService){}\n\n  @UseGuards(MetricsGuard)\n  @Get('/metrics')\n  @Header('Content-Type', 'text/plain; version=0.0.4')\n  async metricsEndpoint(){ return this.metrics.getMetrics(); }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/health.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/metrics/metrics.controller.ts",
      "line": 7,
      "snippet": "import { Controller, Get } from '@nestjs/common';\nimport * as client from 'prom-client';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller('metrics')\nexport class MetricsController {\n  @Get()\n  async metrics() { return register.metrics(); }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/health.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/health.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/health.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/main.ts",
      "line": 17,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/health.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/main.ts",
      "line": 15,
      "snippet": "import * as client from 'prom-client';\nimport { Controller, Get } from '@nestjs/common';\nconst register = new client.Registry();\nclient.collectDefaultMetrics({ register });\n@Controller()\nclass MetricsController {\n  @Get('/metrics')\n  async metrics(): Promise<string> {\n    return register.metrics();\n  }\n}\nimport { ValidationPipe } from '@nestjs/common';"
    },
    {
      "method": "GET",
      "path": "/metrics",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/metrics/metrics.controller.ts",
      "line": 6,
      "snippet": "import { Controller, Get, Res, HttpStatus } from '@nestjs/common';\nimport { register, collectDefaultMetrics } from 'prom-client';\nimport type { Response } from 'express';\ncollectDefaultMetrics();\n@Controller()\nexport class MetricsController { @Get('/metrics') async metrics(@Res() res:Response){ if(String(process.env.METRICS_ENABLED||'true')!=='true'){ return res.status(HttpStatus.NOT_FOUND).send('metrics disabled'); } res.setHeader('Content-Type', register.contentType); const metrics=await register.metrics(); return res.status(HttpStatus.OK).send(metrics); } }"
    },
    {
      "method": "GET",
      "path": "/notifications/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
      "line": 26,
      "snippet": "\n  @Post('push')\n  queuePush(@Body() dto: any) {\n    return this.svc.queuePush(dto.to, dto.body);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.findById(id);\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/notifications/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
      "line": 23,
      "snippet": "\n  @Post('push')\n  sendPush(@Body() dto: {token: string; title: string; body: string; data?: any}) {\n    return this.svc.sendPush(dto);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/notifications/:userId",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/notifications/controllers/notifications.controller.ts",
      "line": 11,
      "snippet": "import { Notification } from '../entities/notification.entity';\n\n@Controller('notifications')\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  @Get(':userId')\n  async findAll(@Param('userId') userId: number): Promise<Notification[]> {\n    return this.notificationsService.findAllByUser(Number(userId));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/payments/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/controllers/payments.controller.ts",
      "line": 17,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Payment[]> {\n    return this.paymentsService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise<Payment> {\n    return this.paymentsService.findOne(id);\n  }\n\n  @Get('verify/callback')"
    },
    {
      "method": "GET",
      "path": "/payments/orders/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 34,
      "snippet": "  // Orders\n  @Post('orders')\n  createOrder(@Body() dto: any) {\n    return this.svc.createOrder(dto.userId, dto.productId, dto.couponCode);\n  }\n\n  @Get('orders/:id')\n  getOrder(@Param('id') id: string) {\n    return this.svc.getOrder(id);\n  }\n\n  // Payment Intent"
    },
    {
      "method": "GET",
      "path": "/payments/products",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 17,
      "snippet": "  // Products\n  @Post('products')\n  createProduct(@Body() dto: any) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  // Coupons"
    },
    {
      "method": "GET",
      "path": "/payments/products",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
      "line": 13,
      "snippet": "\n  @Post('products')\n  createProduct(@Body() dto: {name: string; priceCents: number; currency?: string}) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  @Post('orders')"
    },
    {
      "method": "GET",
      "path": "/payments/verify/callback",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/controllers/payments.controller.ts",
      "line": 22,
      "snippet": "\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise<Payment> {\n    return this.paymentsService.findOne(id);\n  }\n\n  @Get('verify/callback')\n  async verifyCallback(@Query('Authority') authority: string, @Query('Amount') amount: string): Promise<{ success: boolean }> {\n    const ok = await this.paymentsService.verify(authority, Number(amount));\n    return { success: ok };\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/payrolls",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payroll/controllers/payroll.controller.ts",
      "line": 10,
      "snippet": "import { Payroll } from '../entities/payroll.entity';\n\n@Controller('payrolls')\nexport class PayrollController {\n  constructor(private readonly payrollService: PayrollService) {}\n\n  @Get()\n  async findAll(): Promise<Payroll[]> {\n    return this.payrollService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/payrolls/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payroll/controllers/payroll.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Payroll[]> {\n    return this.payrollService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Payroll> {\n    return this.payrollService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/ready",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/health.controller.ts",
      "line": 7,
      "snippet": "\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class HealthController {\n  @Get('/healthz') health(){ return { ok: true }; }\n  @Get('/ready') ready(){ return { ready: true }; }\n}"
    },
    {
      "method": "GET",
      "path": "/readyz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/common/controllers/health.controller.ts",
      "line": 8,
      "snippet": "\n@Controller()\nexport class HealthController {\n  @Get('/healthz')\n  health() { return { ok: true }; }\n\n  @Get('/readyz')\n  ready() { return { ok: true }; }\n}"
    },
    {
      "method": "GET",
      "path": "/readyz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/health.controller.ts",
      "line": 5,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/readyz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/health.controller.ts",
      "line": 5,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/readyz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/health.controller.ts",
      "line": 5,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/readyz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/health.controller.ts",
      "line": 5,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/readyz",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/health.controller.ts",
      "line": 5,
      "snippet": "import { Controller, Get } from '@nestjs/common'\n@Controller()\nexport class HealthController {\n  @Get('healthz') health(){ return { ok:true, ts:Date.now() } }\n  @Get('readyz') ready(){ return { ready:true } }\n  @Get('metrics') metrics(){ return '# HELP up gauge\\n# TYPE up gauge\\nup 1' }\n}"
    },
    {
      "method": "GET",
      "path": "/security/audit",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/security/controllers/security.controller.ts",
      "line": 9,
      "snippet": "import { SecurityService } from '../security.service';\n\n@Controller('security')\nexport class SecurityController {\n  constructor(private readonly securityService: SecurityService) {}\n\n  @Get('audit')\n  getAuditLog() {\n    return this.securityService.auditLog;\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/surveys",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/survey/controllers/survey.controller.ts",
      "line": 10,
      "snippet": "import { Survey } from '../entities/survey.entity';\n\n@Controller('surveys')\nexport class SurveyController {\n  constructor(private readonly surveyService: SurveyService) {}\n\n  @Get()\n  async findAll(): Promise<Survey[]> {\n    return this.surveyService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/surveys/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/survey/controllers/survey.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Survey[]> {\n    return this.surveyService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Survey> {\n    return this.surveyService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/tickets",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/support/controllers/support.controller.ts",
      "line": 10,
      "snippet": "import { Support } from '../entities/support.entity';\n\n@Controller('tickets')\nexport class SupportController {\n  constructor(private readonly supportService: SupportService) {}\n\n  @Get()\n  async findAll(): Promise<Support[]> {\n    return this.supportService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/tickets/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/support/controllers/support.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<Support[]> {\n    return this.supportService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<Support> {\n    return this.supportService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/users",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/users/controllers/users.controller.ts",
      "line": 10,
      "snippet": "import { User } from '../entities/user.entity';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  async findAll(): Promise<User[]> {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')"
    },
    {
      "method": "GET",
      "path": "/users/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/users/controllers/users.controller.ts",
      "line": 15,
      "snippet": "\n  @Get()\n  async findAll(): Promise<User[]> {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number): Promise<User> {\n    return this.usersService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/wallets/:userId",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/wallet/controllers/wallet.controller.ts",
      "line": 10,
      "snippet": "import { Wallet } from '../entities/wallet.entity';\n\n@Controller('wallets')\nexport class WalletController {\n  constructor(private readonly walletService: WalletService) {}\n\n  @Get(':userId')\n  async getWallet(@Param('userId') userId: number): Promise<Wallet> {\n    return this.walletService.findOne(Number(userId));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/workouts/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/workouts/controllers/workouts.controller.ts",
      "line": 14,
      "snippet": "\n  @Get()\n  findAll(): Promise<PrismaWorkout[]> {\n    return this.workoutsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise<PrismaWorkout> {\n    return this.workoutsService.findOne(Number(id));\n  }\n}"
    },
    {
      "method": "GET",
      "path": "/workouts/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
      "line": 21,
      "snippet": "\n  @Post()\n  create(@Body() dto: any) {\n    return this.svc.create(dto);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Put(':id')"
    },
    {
      "method": "GET",
      "path": "/workouts/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts/workouts.controller.ts",
      "line": 13,
      "snippet": "\n  @Get()\n  list(@Query('q') q?: string) {\n    return this.svc.list(q);\n  }\n\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Post()"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/auth.controller.ts",
      "line": 12,
      "snippet": "\n/** REST Auth endpoints */\n@Controller()\nexport class AuthController {\n  constructor(private readonly auth: AuthUseCase) {}\n\n  @Post(API_ROUTES.AUTH.LOGIN)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.username, dto.password);\n  }\n"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/auth.controller.ts",
      "line": 18,
      "snippet": "  @Post(API_ROUTES.AUTH.LOGIN)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.username, dto.password);\n  }\n\n  @Post(API_ROUTES.AUTH.REFRESH)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  refresh(@Body() dto: RefreshDto) {\n    return this.auth.refresh(dto.token);\n  }\n}"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/presentation/controllers/payments.controller.ts",
      "line": 13,
      "snippet": "\n/** REST Payments endpoints */\n@Controller()\nexport class PaymentsController {\n  constructor(private readonly payments: PaymentsUseCase) {}\n\n  @Post(API_ROUTES.PAYMENTS.ROOT)\n  @UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true }))\n  async create(\n    @Headers('x-user-id') userId: string,\n    @Headers('idempotency-key') idemKey: string | undefined,\n    @Body() dto: CreatePaymentDto,"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
      "line": 8,
      "snippet": "import { RewardsService } from './rewards.service'\n@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
      "line": 8,
      "snippet": "import { PhysioService } from './physio.service'\n@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
      "line": 8,
      "snippet": "import { AssessmentsService } from './assessments.service'\n@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
      "line": 8,
      "snippet": "import { AnalyticsService } from './analytics.service'\n@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "POST",
      "path": "/",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
      "line": 8,
      "snippet": "import { BookingService } from './booking.service'\n@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "POST",
      "path": "/admin/login",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/admin.controller.ts",
      "line": 22,
      "snippet": "  return users.find((x) => x.u === username);\n}\n\n@Controller('admin')\n@UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\nexport class AdminController {\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  login(@Body() body: AdminLoginDto) {\n    const secret = process.env.ADMIN_JWT_SECRET;\n    const usersRaw = process.env.ADMIN_USERS_JSON || '[]';\n    if (!secret) throw new UnauthorizedException('admin jwt not configured');"
    },
    {
      "method": "POST",
      "path": "/auth/login",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/auth.controller.ts",
      "line": 17,
      "snippet": "\n@Controller('auth') // see API_ROUTES.auth\n@UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true, forbidNonWhitelisted: true }))\nexport class AuthController {\n  constructor(private readonly auth: AuthService) {}\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(@Body() body: LoginDto) {\n    const tokens = await this.auth.login(body);\n    return { ok: true, data: tokens };\n  }"
    },
    {
      "method": "POST",
      "path": "/auth/login",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
      "line": 15,
      "snippet": "\n  @Post('register')\n  async register(@Body() dto: RegisterDto) {\n    return this.auth.register(dto.email, dto.password);\n  }\n\n  @Post('login')\n  async login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.email, dto.password);\n  }\n\n  @Post('refresh')"
    },
    {
      "method": "POST",
      "path": "/auth/logout",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/auth.controller.ts",
      "line": 31,
      "snippet": "  @HttpCode(HttpStatus.OK)\n  async refresh(@Body() body: RefreshDto) {\n    const tokens = await this.auth.refresh(body.refreshToken);\n    return { ok: true, data: tokens };\n  }\n\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout() {\n    // stateless logout — clients should delete tokens; optional server-side blacklist could be added later\n    return { ok: true };\n  }"
    },
    {
      "method": "POST",
      "path": "/auth/password/confirm",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/password-reset.controller.ts",
      "line": 16,
      "snippet": "\n  @Post('request')\n  async request(@Body() dto: RequestDto) {\n    return this.svc.request(dto.email);\n  }\n\n  @Post('confirm')\n  async confirm(@Body() dto: ConfirmDto) {\n    return this.svc.confirm(dto.email, dto.token, dto.newPassword);\n  }\n}"
    },
    {
      "method": "POST",
      "path": "/auth/password/request",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/password-reset.controller.ts",
      "line": 11,
      "snippet": "class ConfirmDto { email: string; token: string; newPassword: string; }\n\n@Controller('auth/password')\nexport class PasswordResetController {\n  constructor(private readonly svc: PasswordResetService) {}\n\n  @Post('request')\n  async request(@Body() dto: RequestDto) {\n    return this.svc.request(dto.email);\n  }\n\n  @Post('confirm')"
    },
    {
      "method": "POST",
      "path": "/auth/refresh",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/auth/auth.controller.ts",
      "line": 24,
      "snippet": "  @HttpCode(HttpStatus.OK)\n  async login(@Body() body: LoginDto) {\n    const tokens = await this.auth.login(body);\n    return { ok: true, data: tokens };\n  }\n\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  async refresh(@Body() body: RefreshDto) {\n    const tokens = await this.auth.refresh(body.refreshToken);\n    return { ok: true, data: tokens };\n  }"
    },
    {
      "method": "POST",
      "path": "/auth/refresh",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
      "line": 20,
      "snippet": "\n  @Post('login')\n  async login(@Body() dto: LoginDto) {\n    return this.auth.login(dto.email, dto.password);\n  }\n\n  @Post('refresh')\n  @UseGuards(JwtAuthGuard)\n  async refresh(@Req() req: any, @Body() dto: RefreshDto) {\n    return this.auth.refresh(req.user.sub, dto.refreshToken);\n  }\n"
    },
    {
      "method": "POST",
      "path": "/auth/register",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/auth.controller.ts",
      "line": 10,
      "snippet": "import { JwtAuthGuard } from './jwt.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly auth: AuthService) {}\n\n  @Post('register')\n  async register(@Body() dto: RegisterDto) {\n    return this.auth.register(dto.email, dto.password);\n  }\n\n  @Post('login')"
    },
    {
      "method": "POST",
      "path": "/auth/totp/disable",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/totp.controller.ts",
      "line": 22,
      "snippet": "\n  @Post('verify')\n  async verify(@Req() req: any, @Body() dto: VerifyDto) {\n    return this.totp.verify(req.user.sub, dto.code);\n  }\n\n  @Post('disable')\n  async disable(@Req() req: any) {\n    return this.totp.disable(req.user.sub);\n  }\n}"
    },
    {
      "method": "POST",
      "path": "/auth/totp/enable",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/totp.controller.ts",
      "line": 12,
      "snippet": "\n@Controller('auth/totp')\n@UseGuards(JwtAuthGuard)\nexport class TotpController {\n  constructor(private readonly totp: TotpService) {}\n\n  @Post('enable')\n  async enable(@Req() req: any) {\n    return this.totp.enable(req.user.sub);\n  }\n\n  @Post('verify')"
    },
    {
      "method": "POST",
      "path": "/auth/totp/verify",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/totp.controller.ts",
      "line": 17,
      "snippet": "\n  @Post('enable')\n  async enable(@Req() req: any) {\n    return this.totp.enable(req.user.sub);\n  }\n\n  @Post('verify')\n  async verify(@Req() req: any, @Body() dto: VerifyDto) {\n    return this.totp.verify(req.user.sub, dto.code);\n  }\n\n  @Post('disable')"
    },
    {
      "method": "POST",
      "path": "/cert/issue",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/certificate/certificate.controller.ts",
      "line": 10,
      "snippet": "import { CertificateService } from './certificate.service';\n\n@Controller('cert')\nexport class CertificateController {\n  constructor(private readonly svc: CertificateService) {}\n\n  @Post('issue')\n  @Roles('admin')\n  @UseGuards(RolesGuard)\n  async issue(@Body() body: any) {\n    return this.svc.issueCertificate(body);\n  }"
    },
    {
      "method": "POST",
      "path": "/live/egress/start",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
      "line": 25,
      "snippet": "\n  @Post('room/delete')\n  async delete(@Body() body: { room: string }) {\n    return this.live.deleteRoom(body.room);\n  }\n\n  @Post('egress/start')\n  async startEgress(@Body() body: { room: string; filepath?: string; livestreamUrl?: string }) {\n    return this.live.startCompositeEgress(body.room, { filepath: body.filepath, livestreamUrl: body.livestreamUrl });\n  }\n\n  @Post('egress/stop')"
    },
    {
      "method": "POST",
      "path": "/live/egress/stop",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
      "line": 30,
      "snippet": "\n  @Post('egress/start')\n  async startEgress(@Body() body: { room: string; filepath?: string; livestreamUrl?: string }) {\n    return this.live.startCompositeEgress(body.room, { filepath: body.filepath, livestreamUrl: body.livestreamUrl });\n  }\n\n  @Post('egress/stop')\n  async stopEgress(@Body() body: { egressId: string }) {\n    return this.live.stopEgress(body.egressId);\n  }\n}"
    },
    {
      "method": "POST",
      "path": "/live/room/create",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
      "line": 15,
      "snippet": "  @HttpCode(HttpStatus.OK)\n  issueToken(@Body() body: { room: string; identity: string; role?: LiveRole; ttlSeconds?: number }) {\n    const role: LiveRole = body.role ?? 'viewer';\n    return this.live.issueToken({ room: body.room, identity: body.identity, role, ttlSeconds: body.ttlSeconds });\n  }\n\n  @Post('room/create')\n  async create(@Body() body: { room: string }) {\n    return this.live.createRoom(body.room);\n  }\n\n  @Post('room/delete')"
    },
    {
      "method": "POST",
      "path": "/live/room/delete",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
      "line": 20,
      "snippet": "\n  @Post('room/create')\n  async create(@Body() body: { room: string }) {\n    return this.live.createRoom(body.room);\n  }\n\n  @Post('room/delete')\n  async delete(@Body() body: { room: string }) {\n    return this.live.deleteRoom(body.room);\n  }\n\n  @Post('egress/start')"
    },
    {
      "method": "POST",
      "path": "/live/token",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/livekit/livekit.controller.ts",
      "line": 8,
      "snippet": "import { LivekitService, LiveRole } from './livekit.service';\n\n@Controller('live')\nexport class LivekitController {\n  constructor(private readonly live: LivekitService) {}\n\n  @Post('token')\n  @HttpCode(HttpStatus.OK)\n  issueToken(@Body() body: { room: string; identity: string; role?: LiveRole; ttlSeconds?: number }) {\n    const role: LiveRole = body.role ?? 'viewer';\n    return this.live.issueToken({ room: body.room, identity: body.identity, role, ttlSeconds: body.ttlSeconds });\n  }"
    },
    {
      "method": "POST",
      "path": "/media/confirm",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/media/media-upload.controller.ts",
      "line": 7,
      "snippet": "import { requireEnv } from '../common/utils/nulls';\nimport { Body, Controller, Post } from '@nestjs/common';\nimport { ConfirmUploadDto } from './dto/confirm-upload.dto';\n\n@Controller('media')\nexport class MediaUploadController {\n  @Post('confirm')\n  async confirm(@Body() body: ConfirmUploadDto) {\n    const bucket = body.bucket || requireEnv('S3_BUCKET');\n    // اینجا منطق ذخیره در دیتابیس/صف را بگذارید\n    return { ok: true, bucket, key: body.key };\n  }"
    },
    {
      "method": "POST",
      "path": "/notifications/email",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
      "line": 11,
      "snippet": "@ApiTags('notifications')\n@ApiBearerAuth()\n@Controller('notifications')\nexport class Notifications_serviceController {\n  constructor(private readonly svc: NotificationsService) {}\n\n  @Post('email')\n  queueEmail(@Body() dto: any) {\n    return this.svc.queueEmail(dto.to, dto.subject, dto.body);\n  }\n\n  @Post('sms')"
    },
    {
      "method": "POST",
      "path": "/notifications/email",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
      "line": 8,
      "snippet": "import { NotificationsService } from './notifications.service';\n\n@Controller('notifications')\nexport class NotificationsController {\n  constructor(private readonly svc: NotificationsService) {}\n\n  @Post('email')\n  sendEmail(@Body() dto: {to: string; subject: string; html: string}) {\n    return this.svc.sendEmail(dto);\n  }\n\n  @Post('sms')"
    },
    {
      "method": "POST",
      "path": "/notifications/push",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
      "line": 21,
      "snippet": "\n  @Post('sms')\n  queueSms(@Body() dto: any) {\n    return this.svc.queueSms(dto.to, dto.body);\n  }\n\n  @Post('push')\n  queuePush(@Body() dto: any) {\n    return this.svc.queuePush(dto.to, dto.body);\n  }\n\n  @Get(':id')"
    },
    {
      "method": "POST",
      "path": "/notifications/push",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
      "line": 18,
      "snippet": "\n  @Post('sms')\n  sendSms(@Body() dto: {to: string; body: string}) {\n    return this.svc.sendSms(dto);\n  }\n\n  @Post('push')\n  sendPush(@Body() dto: {token: string; title: string; body: string; data?: any}) {\n    return this.svc.sendPush(dto);\n  }\n\n  @Get(':id')"
    },
    {
      "method": "POST",
      "path": "/notifications/sms",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.controller.ts",
      "line": 16,
      "snippet": "\n  @Post('email')\n  queueEmail(@Body() dto: any) {\n    return this.svc.queueEmail(dto.to, dto.subject, dto.body);\n  }\n\n  @Post('sms')\n  queueSms(@Body() dto: any) {\n    return this.svc.queueSms(dto.to, dto.body);\n  }\n\n  @Post('push')"
    },
    {
      "method": "POST",
      "path": "/notifications/sms",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.controller.ts",
      "line": 13,
      "snippet": "\n  @Post('email')\n  sendEmail(@Body() dto: {to: string; subject: string; html: string}) {\n    return this.svc.sendEmail(dto);\n  }\n\n  @Post('sms')\n  sendSms(@Body() dto: {to: string; body: string}) {\n    return this.svc.sendSms(dto);\n  }\n\n  @Post('push')"
    },
    {
      "method": "POST",
      "path": "/payments",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/payments.controller.ts",
      "line": 19,
      "snippet": "@Controller('payments') // see API_ROUTES.payments\n@UseGuards(JwtAuthGuard)\n@UsePipes(new SanitizePipe(), new ValidationPipe({ whitelist: true, transform: true, forbidNonWhitelisted: true }))\nexport class PaymentsController {\n  constructor(private readonly payments: PaymentsService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async create(@Body() body: CreatePaymentDto, @Headers('Idempotency-Key') idem?: string) {\n    const res = await (this.payments as any).create({ ...body, idempotencyKey: body.idempotencyKey || idem || undefined });\n    return { ok: true, data: res };\n  }"
    },
    {
      "method": "POST",
      "path": "/payments/coupons",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 23,
      "snippet": "  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  // Coupons\n  @Post('coupons')\n  createCoupon(@Body() dto: any) {\n    return this.svc.createCoupon(dto.code, dto.percentOff);\n  }\n\n  // Orders"
    },
    {
      "method": "POST",
      "path": "/payments/coupons",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
      "line": 39,
      "snippet": "\n  @Post('subscriptions')\n  createSubscription(@Body() dto: {userId: string; productId: string}) {\n    return this.svc.createSubscription(dto);\n  }\n\n  @Post('coupons')\n  createCoupon(@Body() dto: {code: string; percentOff: number}) {\n    return this.svc.createCoupon(dto);\n  }\n}"
    },
    {
      "method": "POST",
      "path": "/payments/intent/:orderId",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 40,
      "snippet": "  @Get('orders/:id')\n  getOrder(@Param('id') id: string) {\n    return this.svc.getOrder(id);\n  }\n\n  // Payment Intent\n  @Post('intent/:orderId')\n  createIntent(@Param('orderId') orderId: string) {\n    return this.svc.createIntent(orderId);\n  }\n\n  // Webhook (raw body)"
    },
    {
      "method": "POST",
      "path": "/payments/intent/:orderId",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
      "line": 23,
      "snippet": "\n  @Post('orders')\n  createOrder(@Body() dto: {userId: string; productId: string; couponCode?: string}) {\n    return this.svc.createOrder(dto);\n  }\n\n  @Post('intent/:orderId')\n  createPaymentIntent(@Param('orderId') orderId: string) {\n    return this.svc.createPaymentIntent(orderId);\n  }\n\n  @Post('webhook')"
    },
    {
      "method": "POST",
      "path": "/payments/orders",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 29,
      "snippet": "  @Post('coupons')\n  createCoupon(@Body() dto: any) {\n    return this.svc.createCoupon(dto.code, dto.percentOff);\n  }\n\n  // Orders\n  @Post('orders')\n  createOrder(@Body() dto: any) {\n    return this.svc.createOrder(dto.userId, dto.productId, dto.couponCode);\n  }\n\n  @Get('orders/:id')"
    },
    {
      "method": "POST",
      "path": "/payments/orders",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
      "line": 18,
      "snippet": "\n  @Get('products')\n  listProducts() {\n    return this.svc.listProducts();\n  }\n\n  @Post('orders')\n  createOrder(@Body() dto: {userId: string; productId: string; couponCode?: string}) {\n    return this.svc.createOrder(dto);\n  }\n\n  @Post('intent/:orderId')"
    },
    {
      "method": "POST",
      "path": "/payments/plans",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 52,
      "snippet": "  @Post('webhook')\n  webhook(@Req() req: any, @Headers('stripe-signature') sig?: string) {\n    return this.svc.handleWebhook(req.rawBody || req.body, sig);\n  }\n\n  // Subscriptions\n  @Post('plans')\n  createPlan(@Body() dto: any) {\n    return this.svc.createPlan(dto.productId, dto.interval, dto.priceCents, dto.trialDays);\n  }\n\n  @Post('subscriptions')"
    },
    {
      "method": "POST",
      "path": "/payments/products",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 12,
      "snippet": "@ApiBearerAuth()\n@Controller('payments')\nexport class Payments_serviceController {\n  constructor(private readonly svc: PaymentsService) {}\n\n  // Products\n  @Post('products')\n  createProduct(@Body() dto: any) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')"
    },
    {
      "method": "POST",
      "path": "/payments/products",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
      "line": 8,
      "snippet": "import { PaymentsService } from './payments.service';\n\n@Controller('payments')\nexport class PaymentsController {\n  constructor(private readonly svc: PaymentsService) {}\n\n  @Post('products')\n  createProduct(@Body() dto: {name: string; priceCents: number; currency?: string}) {\n    return this.svc.createProduct(dto);\n  }\n\n  @Get('products')"
    },
    {
      "method": "POST",
      "path": "/payments/subscriptions",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 57,
      "snippet": "  // Subscriptions\n  @Post('plans')\n  createPlan(@Body() dto: any) {\n    return this.svc.createPlan(dto.productId, dto.interval, dto.priceCents, dto.trialDays);\n  }\n\n  @Post('subscriptions')\n  subscribe(@Body() dto: any) {\n    return this.svc.subscribe(dto.userId, dto.planId);\n  }\n}"
    },
    {
      "method": "POST",
      "path": "/payments/subscriptions",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
      "line": 34,
      "snippet": "  @Post('webhook')\n  webhook(@Req() req: any) {\n    // raw body expected: ensure main.ts uses raw body for this route\n    return this.svc.handleWebhook(req.headers['stripe-signature'], req.rawBody);\n  }\n\n  @Post('subscriptions')\n  createSubscription(@Body() dto: {userId: string; productId: string}) {\n    return this.svc.createSubscription(dto);\n  }\n\n  @Post('coupons')"
    },
    {
      "method": "POST",
      "path": "/payments/webhook",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/webhook.controller.ts",
      "line": 14,
      "snippet": "  private verifySignature(rawBody: string, sigHeader: string|undefined, secret: string) {\n    if (!sigHeader) return false;\n    const h = crypto.createHmac('sha256', secret).update(rawBody).digest('hex');\n    return crypto.timingSafeEqual(Buffer.from(h), Buffer.from(sigHeader));\n  }\n\n  @Post('webhook')\n  async handle(@Req() req, @Res() res) {\n    const secret = process.env.PAYMENT_WEBHOOK_SECRET || '';\n    const sig = req.headers['x-signature'] as string | undefined;\n    const raw = (req as any).rawBody || JSON.stringify(req.body || {});\n    if (!secret || !this.verifySignature(raw, sig, secret)) {"
    },
    {
      "method": "POST",
      "path": "/payments/webhook",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments-service.controller.ts",
      "line": 46,
      "snippet": "  @Post('intent/:orderId')\n  createIntent(@Param('orderId') orderId: string) {\n    return this.svc.createIntent(orderId);\n  }\n\n  // Webhook (raw body)\n  @Post('webhook')\n  webhook(@Req() req: any, @Headers('stripe-signature') sig?: string) {\n    return this.svc.handleWebhook(req.rawBody || req.body, sig);\n  }\n\n  // Subscriptions"
    },
    {
      "method": "POST",
      "path": "/payments/webhook",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/payments/payments.controller.ts",
      "line": 28,
      "snippet": "\n  @Post('intent/:orderId')\n  createPaymentIntent(@Param('orderId') orderId: string) {\n    return this.svc.createPaymentIntent(orderId);\n  }\n\n  @Post('webhook')\n  webhook(@Req() req: any) {\n    // raw body expected: ensure main.ts uses raw body for this route\n    return this.svc.handleWebhook(req.headers['stripe-signature'], req.rawBody);\n  }\n"
    },
    {
      "method": "POST",
      "path": "/reservations/cancel",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/reservations/reservations.controller.ts",
      "line": 22,
      "snippet": "      const r = await this.reservations.reserve(body.userId, body.slotId);\n      reservationsCreated.inc({ status: 'ok' });\n      return { ok: true, reservation: { id: r.id, slotId: r.slotId } };\n    });\n  }\n\n  @Post('cancel')\n  async cancel(@Body() body: any) {\n    return await withSpan('reservations.cancel', { 'reservation.id': body.reservationId }, async () => {\n      const r = await this.reservations.cancel(body.reservationId);\n      reservationsCreated.inc({ status: 'cancel' });\n      return { ok: true, reservation: { id: r.id } };"
    },
    {
      "method": "POST",
      "path": "/reservations/reserve",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/reservations/reservations.controller.ts",
      "line": 12,
      "snippet": "\n@Controller('reservations')\nexport class ReservationsController {\n  private jwt = new JwtKidService();\n  constructor(private readonly reservations: ReservationService) {}\n\n  @Post('reserve')\n  async reserve(@Body() body: any) {\n    // Optional auth via JWT (if Authorization header provided)\n    return await withSpan('reservations.reserve', { 'user.id': body.userId, 'slot.id': body.slotId }, async () => {\n      const r = await this.reservations.reserve(body.userId, body.slotId);\n      reservationsCreated.inc({ status: 'ok' });"
    },
    {
      "method": "POST",
      "path": "/workouts",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
      "line": 16,
      "snippet": "\n  @Get()\n  list(@Query('q') q?: string) {\n    return this.svc.list(q);\n  }\n\n  @Post()\n  create(@Body() dto: any) {\n    return this.svc.create(dto);\n  }\n\n  @Get(':id')"
    },
    {
      "method": "POST",
      "path": "/workouts",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts/workouts.controller.ts",
      "line": 18,
      "snippet": "\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Post()\n  create(@Body() dto: {userId: string; title: string; level: 'beginner'|'intermediate'|'advanced'; goal: 'fatloss'|'strength'|'hypertrophy'; equipment?: string[]}) {\n    return this.svc.create(dto);\n  }\n}"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/src/rewards.controller.ts",
      "line": 9,
      "snippet": "@Controller()\nexport class RewardsController {\n  constructor(private svc: RewardsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/src/physio.controller.ts",
      "line": 9,
      "snippet": "@Controller()\nexport class PhysioController {\n  constructor(private svc: PhysioService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/src/assessments.controller.ts",
      "line": 9,
      "snippet": "@Controller()\nexport class AssessmentsController {\n  constructor(private svc: AssessmentsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/src/analytics.controller.ts",
      "line": 9,
      "snippet": "@Controller()\nexport class AnalyticsController {\n  constructor(private svc: AnalyticsService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
      "line": 9,
      "snippet": "@Controller()\nexport class BookingController {\n  constructor(private svc: BookingService){}\n  @Get() list(){ return this.svc.list() }\n  @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) }\n  @Post() create(@Body() dto:any){ return this.svc.create(dto) }\n  @Put(':id') update(@Param('id') id:string, @Body() dto:any){ return this.svc.update(id,dto) }\n  @Delete(':id') remove(@Param('id') id:string){ return this.svc.remove(id) }\n}"
    },
    {
      "method": "PUT",
      "path": "/workouts/:id",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.controller.ts",
      "line": 26,
      "snippet": "\n  @Get(':id')\n  get(@Param('id') id: string) {\n    return this.svc.get(id);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() dto: any) {\n    return this.svc.update(id, dto);\n  }\n\n  @Delete(':id')"
    }
  ],
  "UNRESOLVED_CLIENT_CALLS": [
    {
      "method": "GET",
      "url": "/api/coaches",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/coaches/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Coaches() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/coaches').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>coaches</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/coaches",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/coaches/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Coaches() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/coaches').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>coaches</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/courses",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/courses/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>courses</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/courses",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/courses/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>courses</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/marketplace",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/marketplace/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Marketplace() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/marketplace').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>marketplace</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/marketplace",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/marketplace/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Marketplace() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/marketplace').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>marketplace</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/metrics?name=",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/admin/experiments/page.tsx",
      "line": 13,
      "snippet": "    <h3 style={{marginTop:0}}>{title}</h3>\n    {children}\n  </div>;\n}\n\nasync function fetchMetric(name:string){\n  const r = await fetch('/api/metrics?name=' + encodeURIComponent(name));\n  const j = await r.json();\n  // clickhouse JSON: { data: [...], meta: [...] }\n  return j.data || [];\n}\n"
    },
    {
      "method": "GET",
      "url": "/api/monitoring",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/monitoring/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>monitoring</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/monitoring",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/monitoring/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>monitoring</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/notifications",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/notifications/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>notifications</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/notifications",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/notifications/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>notifications</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/nutrition",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/nutrition/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>nutrition</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/nutrition",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/nutrition/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>nutrition</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/payments",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/payments/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Payments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/payments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>payments</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/payments",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/payments/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Payments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/payments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>payments</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/physio",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/physio/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>physio</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/physio",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/physio/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>physio</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/rewards",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/rewards/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>rewards</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/rewards",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/rewards/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>rewards</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/vip",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/vip/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>vip</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/vip",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/vip/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>vip</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/workouts",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-pwa/src/features/workouts/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Workouts() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/workouts').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>workouts</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/api/workouts",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-pwa/src/features/workouts/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Workouts() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(()=>{ axios.get('/api/workouts').then(r=>setRows(r.data??[])).catch(()=>setRows([])) },[])\n  return <div><h2>workouts</h2><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/assessments",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/assessments/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Assessments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/assessments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>assessments — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/assessments",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/assessments/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Assessments() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/assessments').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>assessments — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/booking",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/booking/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Booking() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/booking').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>booking — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/booking",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/booking/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Booking() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/booking').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>booking — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/certificate",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/certificate/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Certificate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/certificate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>certificate — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/certificate",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/certificate/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Certificate() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/certificate').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>certificate — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/chat",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/chat/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Chat() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/chat').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>chat — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/chat",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/chat/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Chat() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/chat').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>chat — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/courses",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/courses/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>courses — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/courses",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/courses/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Courses() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/courses').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>courses — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "https://fcm.googleapis.com/fcm/send",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.service.ts",
      "line": 42,
      "snippet": "    return { id: rec.id };\n  }\n\n  async sendPush(dto: {token: string; title: string; body: string; data?: any}) {\n    const serverKey = process.env.FCM_SERVER_KEY;\n    if (!serverKey) throw new Error('FCM_SERVER_KEY missing');\n    const resp = await fetch('https://fcm.googleapis.com/fcm/send', {\n      method: 'POST',\n      headers: { 'Authorization': `key=${serverKey}`, 'Content-Type':'application/json' },\n      body: JSON.stringify({ to: dto.token, notification: { title: dto.title, body: dto.body }, data: dto.data || {} })\n    });\n    const j = await resp.json();"
    },
    {
      "method": "GET",
      "url": "/monitoring",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/monitoring/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>monitoring — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/monitoring",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/monitoring/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Monitoring() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/monitoring').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>monitoring — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/notifications",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/notifications/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>notifications — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/notifications",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/notifications/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Notifications() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/notifications').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>notifications — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/nutrition",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/nutrition/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>nutrition — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/nutrition",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/nutrition/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Nutrition() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/nutrition').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>nutrition — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/physio",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/physio/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>physio — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/physio",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/physio/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Physio() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/physio').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>physio — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/rewards",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/rewards/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>rewards — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/rewards",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/rewards/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Rewards() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/rewards').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>rewards — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/vip",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/src/features/vip/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>vip — coach-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    },
    {
      "method": "GET",
      "url": "/vip",
      "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/src/features/vip/index.tsx",
      "line": 5,
      "snippet": "import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nexport default function Vip() {\n  const [rows,setRows] = useState<any[]>([])\n  useEffect(() => { axios.get('/vip').then(r=>setRows(r.data??[])).catch(()=>setRows([])) }, [])\n  return <div><h3>vip — user-pwa</h3><pre>{JSON.stringify(rows,null,2)}</pre></div>\n}"
    }
  ]
}