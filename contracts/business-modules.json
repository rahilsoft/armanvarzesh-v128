{
  "stage33_35_business_modules": {
    "payment": [
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72",
        "counts": {
          "hits": 38,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/parity_ops.d.ts",
            "line": 2,
            "snippet": "// Generated for Stage 07 planning\nexport type MissingGqlOp = 'AddNote' | 'ArchiveClient' | 'AssignPlan' | 'BookReservation' | 'CancelReservation' | 'Client' | 'ClientNotes' | 'Clients' | 'CoachAvailability' | 'CoachReservations' | 'CreateAdmin' | 'CreateAvailability' | 'CreateChallenge' | 'CreateCoach' | 'CreateNotification' | 'CreateNutritionPlan' | 'CreatePayment' | 'CreateProduct' | 'CreateReward' | 'CreateSurvey';",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/e2e/flow.reservation-payment-notification.e2e.ts",
            "line": 8,
            "snippet": "  const res = await fetch(BASE + path, init);\n  return { status: res.status, json: await res.json().catch(()=>({})) };\n}\ndescribe('flow: reservation→payment→notification', ()=>{\n  it('placeholder smoke', async ()=>{\n    assert.equal(typeof BASE, 'string');",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/e2e/flow.reservation-payment-notification.e2e.ts",
            "line": 8,
            "snippet": "  const res = await fetch(BASE + path, init);\n  return { status: res.status, json: await res.json().catch(()=>({})) };\n}\ndescribe('flow: reservation→payment→notification', ()=>{\n  it('placeholder smoke', async ()=>{\n    assert.equal(typeof BASE, 'string');",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — armanvarzesh-monorepo', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — armanvarzesh-monorepo', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/staging/client_vip_payment.spec.ts",
            "line": 9,
            "snippet": "  await page.click('text=ورود');\n  await page.goto(base + '/vip');\n  await expect(page.locator('h2')).toContainText(/vip/i);\n  // TODO: trigger checkout and verify VIP badge\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/frontend/e2e/payment-flow.e2e-spec.ts",
            "line": 4,
            "snippet": "\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"user can complete payment\", async ({ page }) => {\n  await page.goto(\"http://localhost:5173/login\");\n  await page.fill(\"input[type='email']\", \"user@armanfit.com\");",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/frontend/e2e/payment-flow.e2e-spec.ts",
            "line": 13,
            "snippet": "  await page.click(\"text=Recharge\");\n  await page.fill(\"input[name='amount']\", \"500000\");\n  await page.click(\"button[type='submit']\");\n  await expect(page.locator(\"text=Payment Successful\")).toBeVisible();\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/frontend/e2e/payment-flow.e2e-spec.ts",
            "line": 4,
            "snippet": "\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"user can complete payment\", async ({ page }) => {\n  await page.goto(\"http://localhost:5173/login\");\n  await page.fill(\"input[type='email']\", \"user@armanfit.com\");",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/frontend/e2e/payment-flow.e2e-spec.ts",
            "line": 13,
            "snippet": "  await page.click(\"text=Recharge\");\n  await page.fill(\"input[name='amount']\", \"500000\");\n  await page.click(\"button[type='submit']\");\n  await expect(page.locator(\"text=Payment Successful\")).toBeVisible();\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/infra",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/infra/src/outbox.ts",
            "line": 5,
            "snippet": "  aggregate: string;\n  aggregateId: string;\n  type: string;\n  payload: any;\n};\n",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/infra/src/index.ts",
            "line": 2,
            "snippet": "export * from './outbox';\nexport * from './idempotency';",
            "keyword": "\\bidempotenc(y|yKey|y-key|y_key)\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/integration",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/integration/src/queue.ts",
            "line": 27,
            "snippet": "  return { queue, events, ready: true };\n}\n\nexport async function addTestJob(ctx: QueueContext, payload: any) {\n  if (!ctx.queue) throw new Error('Queue not ready');\n  return ctx.queue.add('test', payload, { removeOnComplete: 100, attempts: 2 });",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/integration/src/queue.ts",
            "line": 29,
            "snippet": "\nexport async function addTestJob(ctx: QueueContext, payload: any) {\n  if (!ctx.queue) throw new Error('Queue not ready');\n  return ctx.queue.add('test', payload, { removeOnComplete: 100, attempts: 2 });\n}\n",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/resilience",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/resilience/src/rmq.ts",
            "line": 3,
            "snippet": "export type PublishOptions = { routingKey: string; headers?: Record<string,string>; };\nexport interface MessageBus {\n  publish(exchange: string, payload: any, opts?: PublishOptions): Promise<void>;\n  subscribe(queue: string, handler: (msg: any, headers: Record<string,string>)=>Promise<void>): Promise<void>;\n}",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/http-client",
        "counts": {
          "hits": 3,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/http-client/src/client.ts",
            "line": 43,
            "snippet": "        }\n      } catch {}\n    }\n    // idempotency for mutating methods\n    const method = (config.method || 'get').toLowerCase();\n    if (['post','put','patch','delete'].includes(method)) {",
            "keyword": "\\bidempotenc(y|yKey|y-key|y_key)\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/http-client/src/client.ts",
            "line": 47,
            "snippet": "    const method = (config.method || 'get').toLowerCase();\n    if (['post','put','patch','delete'].includes(method)) {\n      config.headers = config.headers || {};\n      if (!(config.headers as any)['Idempotency-Key']) {\n        (config.headers as any)['Idempotency-Key'] = cryptoRandomId();\n      }",
            "keyword": "\\bidempotenc(y|yKey|y-key|y_key)\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/http-client/src/client.ts",
            "line": 48,
            "snippet": "    if (['post','put','patch','delete'].includes(method)) {\n      config.headers = config.headers || {};\n      if (!(config.headers as any)['Idempotency-Key']) {\n        (config.headers as any)['Idempotency-Key'] = cryptoRandomId();\n      }\n    }",
            "keyword": "\\bidempotenc(y|yKey|y-key|y_key)\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/auth-kit",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/auth-kit/src/jwks.ts",
            "line": 16,
            "snippet": "\n  return {\n    jwk,\n    async sign(payload: Record<string, any>, opts: { iss?: string; aud?: string; expSec?: number } = {}) {\n      const now = Math.floor(Date.now() / 1000);\n      const exp = now + (opts.expSec ?? 3600);",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/auth-kit/src/jwks.ts",
            "line": 19,
            "snippet": "    async sign(payload: Record<string, any>, opts: { iss?: string; aud?: string; expSec?: number } = {}) {\n      const now = Math.floor(Date.now() / 1000);\n      const exp = now + (opts.expSec ?? 3600);\n      return await new SignJWT(payload)\n        .setProtectedHeader({ alg: spec.alg, kid: spec.kid })\n        .setIssuedAt(now)",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site",
        "counts": {
          "hits": 30,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 11,
            "snippet": "\nconst ALLOWED = new Map<string,string>([\n  ['ctr_per_tile', `WITH impressions AS (\n    SELECT JSON_VALUE(payload, '$.id') AS id,\n           JSON_VALUE(payload, '$.variant') AS variant,\n           count() AS imp",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 12,
            "snippet": "const ALLOWED = new Map<string,string>([\n  ['ctr_per_tile', `WITH impressions AS (\n    SELECT JSON_VALUE(payload, '$.id') AS id,\n           JSON_VALUE(payload, '$.variant') AS variant,\n           count() AS imp\n    FROM ${CH_DB}.events",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 19,
            "snippet": "    GROUP BY id, variant\n  ),\n  clicks AS (\n    SELECT JSON_VALUE(payload, '$.id') AS id,\n           JSON_VALUE(payload, '$.variant') AS variant,\n           count() AS clk",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 20,
            "snippet": "  ),\n  clicks AS (\n    SELECT JSON_VALUE(payload, '$.id') AS id,\n           JSON_VALUE(payload, '$.variant') AS variant,\n           count() AS clk\n    FROM ${CH_DB}.events",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 31,
            "snippet": "  LEFT JOIN clicks c ON c.id = i.id AND c.variant = i.variant\n  ORDER BY ctr_pct DESC`],\n  ['conversion_from_tile', `WITH clk AS (\n    SELECT session, JSON_VALUE(payload,'$.id') AS id, JSON_VALUE(payload,'$.variant') AS variant, min(ts) as first_clk\n    FROM ${CH_DB}.events WHERE app='vitrin-site' AND name='tile_click' AND ts>= now()-INTERVAL 7 DAY\n    GROUP BY session, id, variant",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 31,
            "snippet": "  LEFT JOIN clicks c ON c.id = i.id AND c.variant = i.variant\n  ORDER BY ctr_pct DESC`],\n  ['conversion_from_tile', `WITH clk AS (\n    SELECT session, JSON_VALUE(payload,'$.id') AS id, JSON_VALUE(payload,'$.variant') AS variant, min(ts) as first_clk\n    FROM ${CH_DB}.events WHERE app='vitrin-site' AND name='tile_click' AND ts>= now()-INTERVAL 7 DAY\n    GROUP BY session, id, variant",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 48,
            "snippet": "  ORDER BY cr_pct DESC`],\n  ['ab_significance', `WITH base AS (\n    SELECT\n      JSON_VALUE(payload, '$.id') AS id,\n      JSON_VALUE(payload, '$.variant') AS variant,\n      countIf(name='tile_impression') AS imp,",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 49,
            "snippet": "  ['ab_significance', `WITH base AS (\n    SELECT\n      JSON_VALUE(payload, '$.id') AS id,\n      JSON_VALUE(payload, '$.variant') AS variant,\n      countIf(name='tile_impression') AS imp,\n      countIf(name='tile_click') AS clk",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 70,
            "snippet": "  INNER JOIN pairs b ON a.id=b.id AND a.variant < b.variant\n  ORDER BY abs(z_score) DESC`],\n  ['ctr_by_utm', `SELECT\n    JSON_VALUE(payload,'$.id') AS id,\n    coalesce(JSON_VALUE(payload,'$.variant'), '—') AS variant,\n    coalesce(JSON_VALUE(payload,'$.utm_source'), 'direct') AS utm_source,",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/vitrin-site/app/api/metrics/route.ts",
            "line": 71,
            "snippet": "  ORDER BY abs(z_score) DESC`],\n  ['ctr_by_utm', `SELECT\n    JSON_VALUE(payload,'$.id') AS id,\n    coalesce(JSON_VALUE(payload,'$.variant'), '—') AS variant,\n    coalesce(JSON_VALUE(payload,'$.utm_source'), 'direct') AS utm_source,\n    coalesce(JSON_VALUE(payload,'$.utm_campaign'), '—') AS utm_campaign,",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin",
        "counts": {
          "hits": 30,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/utils/permissions.ts",
            "line": 6,
            "snippet": "  VIEW_USERS = \"view_users\",\n  EDIT_USERS = \"edit_users\",\n  VIEW_COACHES = \"view_coaches\",\n  MANAGE_PAYMENTS = \"manage_payments\",\n  VIEW_ANALYTICS = \"view_analytics\"\n}",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/utils/permissions.ts",
            "line": 6,
            "snippet": "  VIEW_USERS = \"view_users\",\n  EDIT_USERS = \"edit_users\",\n  VIEW_COACHES = \"view_coaches\",\n  MANAGE_PAYMENTS = \"manage_payments\",\n  VIEW_ANALYTICS = \"view_analytics\"\n}",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/mutations/payment.mutations.ts",
            "line": 4,
            "snippet": "\nimport { gql } from \"@apollo/client\";\n\nexport const CREATE_PAYMENT = gql`\n  mutation CreatePayment($input: PaymentInput!) {\n    createPayment(input: $input) { id }",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/mutations/payment.mutations.ts",
            "line": 5,
            "snippet": "import { gql } from \"@apollo/client\";\n\nexport const CREATE_PAYMENT = gql`\n  mutation CreatePayment($input: PaymentInput!) {\n    createPayment(input: $input) { id }\n  }",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/mutations/payment.mutations.ts",
            "line": 5,
            "snippet": "import { gql } from \"@apollo/client\";\n\nexport const CREATE_PAYMENT = gql`\n  mutation CreatePayment($input: PaymentInput!) {\n    createPayment(input: $input) { id }\n  }",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/mutations/payment.mutations.ts",
            "line": 6,
            "snippet": "\nexport const CREATE_PAYMENT = gql`\n  mutation CreatePayment($input: PaymentInput!) {\n    createPayment(input: $input) { id }\n  }\n`;",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/queries/analytics.queries.ts",
            "line": 8,
            "snippet": "  query GetAnalytics {\n    analytics {\n      users\n      payments\n      challenges\n    }",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/queries/payment.queries.ts",
            "line": 17,
            "snippet": "\nexport const GET_PAYMENT = gql`\n  query GetPayment($id: Int!) {\n    payment(id: $id) {\n      id\n      user",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/queries/payment.queries.ts",
            "line": 4,
            "snippet": "\nimport { gql } from \"@apollo/client\";\n\nexport const GET_PAYMENTS = gql`\n  query GetPayments {\n    payments {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/graphql/queries/payment.queries.ts",
            "line": 5,
            "snippet": "import { gql } from \"@apollo/client\";\n\nexport const GET_PAYMENTS = gql`\n  query GetPayments {\n    payments {\n      id",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app",
        "counts": {
          "hits": 18,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/payment.queries.ts",
            "line": 4,
            "snippet": "\nimport { gql } from \"@apollo/client\";\n\nexport const GET_PAYMENTS = gql\\`\n  query CoachPayments {\n    payments {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/payment.queries.ts",
            "line": 5,
            "snippet": "import { gql } from \"@apollo/client\";\n\nexport const GET_PAYMENTS = gql\\`\n  query CoachPayments {\n    payments {\n      id",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/payment.queries.ts",
            "line": 6,
            "snippet": "\nexport const GET_PAYMENTS = gql\\`\n  query CoachPayments {\n    payments {\n      id\n      amount",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/usePayment.ts",
            "line": 3,
            "snippet": "\nimport { useQuery } from \"@apollo/client\";\nimport { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\n\nexport function usePayment() {",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/usePayment.ts",
            "line": 3,
            "snippet": "\nimport { useQuery } from \"@apollo/client\";\nimport { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\n\nexport function usePayment() {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/usePayment.ts",
            "line": 3,
            "snippet": "\nimport { useQuery } from \"@apollo/client\";\nimport { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\n\nexport function usePayment() {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/usePayment.ts",
            "line": 5,
            "snippet": "import { useQuery } from \"@apollo/client\";\nimport { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\n\nexport function usePayment() {\n  const { data, loading } = useQuery(GET_PAYMENTS);\n  return {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/usePayment.ts",
            "line": 6,
            "snippet": "import { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\n\nexport function usePayment() {\n  const { data, loading } = useQuery(GET_PAYMENTS);\n  return {\n    payments: data?.payments || [],",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/usePayment.ts",
            "line": 8,
            "snippet": "export function usePayment() {\n  const { data, loading } = useQuery(GET_PAYMENTS);\n  return {\n    payments: data?.payments || [],\n    loading\n  };",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/usePayment.ts",
            "line": 8,
            "snippet": "export function usePayment() {\n  const { data, loading } = useQuery(GET_PAYMENTS);\n  return {\n    payments: data?.payments || [],\n    loading\n  };",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend",
        "counts": {
          "hits": 737,
          "controllers": 1,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 1
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 17,
            "snippet": "import { CoachesModule } from './src/coaches/coaches.module';\nimport { WorkoutsModule } from './src/workouts/workouts.module';\nimport { NutritionModule } from './src/nutrition/nutrition.module';\nimport { PaymentsModule } from './src/payments/payments.module';\nimport { WalletModule } from './src/wallet/wallet.module';\nimport { MarketplaceModule } from './src/marketplace/marketplace.module';",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 17,
            "snippet": "import { CoachesModule } from './src/coaches/coaches.module';\nimport { WorkoutsModule } from './src/workouts/workouts.module';\nimport { NutritionModule } from './src/nutrition/nutrition.module';\nimport { PaymentsModule } from './src/payments/payments.module';\nimport { WalletModule } from './src/wallet/wallet.module';\nimport { MarketplaceModule } from './src/marketplace/marketplace.module';",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 17,
            "snippet": "import { CoachesModule } from './src/coaches/coaches.module';\nimport { WorkoutsModule } from './src/workouts/workouts.module';\nimport { NutritionModule } from './src/nutrition/nutrition.module';\nimport { PaymentsModule } from './src/payments/payments.module';\nimport { WalletModule } from './src/wallet/wallet.module';\nimport { MarketplaceModule } from './src/marketplace/marketplace.module';",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 28,
            "snippet": "import { LiveModule } from './src/live/live.module';\nimport { AdminModule } from './src/admin/admin.module';\nimport { AnalyticsModule } from './src/analytics/analytics.module';\nimport { PayrollModule } from './src/payroll/payroll.module';\nimport { SupportModule } from './src/support/support.module';\nimport { CmsModule } from './src/cms/cms.module';",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 28,
            "snippet": "import { LiveModule } from './src/live/live.module';\nimport { AdminModule } from './src/admin/admin.module';\nimport { AnalyticsModule } from './src/analytics/analytics.module';\nimport { PayrollModule } from './src/payroll/payroll.module';\nimport { SupportModule } from './src/support/support.module';\nimport { CmsModule } from './src/cms/cms.module';",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 28,
            "snippet": "import { LiveModule } from './src/live/live.module';\nimport { AdminModule } from './src/admin/admin.module';\nimport { AnalyticsModule } from './src/analytics/analytics.module';\nimport { PayrollModule } from './src/payroll/payroll.module';\nimport { SupportModule } from './src/support/support.module';\nimport { CmsModule } from './src/cms/cms.module';",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 46,
            "snippet": "    CoachesModule,\n    WorkoutsModule,\n    NutritionModule,\n    PaymentsModule,\n    WalletModule,\n    MarketplaceModule,",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/app.module.ts",
            "line": 57,
            "snippet": "    LiveModule,\n    AdminModule,\n    AnalyticsModule,\n    PayrollModule,\n    SupportModule,\n    CmsModule,",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/payments.service.spec.ts",
            "line": 18,
            "snippet": "}\n\ndescribe('PaymentsService', () => {\n  it('creates a payment successfully', async () => {\n    const prisma = new MockPrisma() as any;\n    const svc = new (PaymentsService as any)(prisma);",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/payments.service.spec.ts",
            "line": 32,
            "snippet": "    await expect(svc.create({ userId: 'u1', amountCents: 0, currency: 'IRR' })).rejects.toBeTruthy();\n  });\n\n  it('rejects duplicate by idempotency', async () => {\n    const prisma = new (class extends MockPrisma {\n      async query<T>(_sql: any): Promise<T[]> { return [{}] as any; }",
            "keyword": "\\bidempotenc(y|yKey|y-key|y_key)\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app",
        "counts": {
          "hits": 33,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/graphql/mutations/payment.mutations.ts",
            "line": 4,
            "snippet": "\nimport { gql } from \"@apollo/client\";\n\nexport const CREATE_PAYMENT = gql\\`\n  mutation CreatePayment($userId: Int!, $input: PaymentInput!) {\n    createPayment(userId: $userId, input: $input)",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/graphql/mutations/payment.mutations.ts",
            "line": 5,
            "snippet": "import { gql } from \"@apollo/client\";\n\nexport const CREATE_PAYMENT = gql\\`\n  mutation CreatePayment($userId: Int!, $input: PaymentInput!) {\n    createPayment(userId: $userId, input: $input)\n  }",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/graphql/mutations/payment.mutations.ts",
            "line": 5,
            "snippet": "import { gql } from \"@apollo/client\";\n\nexport const CREATE_PAYMENT = gql\\`\n  mutation CreatePayment($userId: Int!, $input: PaymentInput!) {\n    createPayment(userId: $userId, input: $input)\n  }",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/graphql/mutations/payment.mutations.ts",
            "line": 6,
            "snippet": "\nexport const CREATE_PAYMENT = gql\\`\n  mutation CreatePayment($userId: Int!, $input: PaymentInput!) {\n    createPayment(userId: $userId, input: $input)\n  }\n\\`;",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/graphql/queries/payment.queries.ts",
            "line": 4,
            "snippet": "\nimport { gql } from \"@apollo/client\";\n\nexport const GET_PAYMENTS = gql\\`\n  query Payments {\n    payments {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/graphql/queries/payment.queries.ts",
            "line": 5,
            "snippet": "import { gql } from \"@apollo/client\";\n\nexport const GET_PAYMENTS = gql\\`\n  query Payments {\n    payments {\n      id",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/graphql/queries/payment.queries.ts",
            "line": 6,
            "snippet": "\nexport const GET_PAYMENTS = gql\\`\n  query Payments {\n    payments {\n      id\n      amount",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/hooks/usePayment.ts",
            "line": 3,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\nimport { CREATE_PAYMENT } from \"@graphql/mutations/payment.mutations\";\n",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/hooks/usePayment.ts",
            "line": 4,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\nimport { CREATE_PAYMENT } from \"@graphql/mutations/payment.mutations\";\n\nexport function usePayment(userId: number) {",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/hooks/usePayment.ts",
            "line": 3,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_PAYMENTS } from \"@graphql/queries/payment.queries\";\nimport { CREATE_PAYMENT } from \"@graphql/mutations/payment.mutations\";\n",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/rewards-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/rewards-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service",
        "counts": {
          "hits": 229,
          "controllers": 1,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 1
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/basic.spec.ts",
            "line": 1,
            "snippet": "import { PaymentsServiceService } from '../src/payments-service.service';\n\ndescribe('payments-service service', () => {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/basic.spec.ts",
            "line": 1,
            "snippet": "import { PaymentsServiceService } from '../src/payments-service.service';\n\ndescribe('payments-service service', () => {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/basic.spec.ts",
            "line": 3,
            "snippet": "import { PaymentsServiceService } from '../src/payments-service.service';\n\ndescribe('payments-service service', () => {\n  it('alive', () => {\n    const s = new PaymentsServiceService();",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/basic.spec.ts",
            "line": 5,
            "snippet": "\ndescribe('payments-service service', () => {\n  it('alive', () => {\n    const s = new PaymentsServiceService();\n    expect(typeof s.health).toBe('function');\n  });",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/payments.spec.ts",
            "line": 1,
            "snippet": "describe('payments', ()=> it('ok', ()=> expect(true).toBe(true)));",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/health.test.ts",
            "line": 5,
            "snippet": "import { createApp } from '@arman/service-kit';\nimport { describe, it, expect } from 'vitest';\n\ndescribe('payments-service service', () => {\n  it('health should be ok', async () => {\n    const ctx = await createApp({ serviceName: 'payments-service' });",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/health.test.ts",
            "line": 7,
            "snippet": "\ndescribe('payments-service service', () => {\n  it('health should be ok', async () => {\n    const ctx = await createApp({ serviceName: 'payments-service' });\n    const res = await request(ctx.app).get('/health');\n    expect(res.status).toBe(200);",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/contract.rest.spec.ts",
            "line": 20,
            "snippet": "  it('POST /payments/products defined @ payments.controller.ts:8', () => { /* TODO: supertest/contract */ });\n  it('POST /payments/subscriptions defined @ payments-service.controller.ts:57', () => { /* TODO: supertest/contract */ });\n  it('POST /payments/subscriptions defined @ payments.controller.ts:34', () => { /* TODO: supertest/contract */ });\n  it('POST /payments/webhook defined @ payments-service.controller.ts:46', () => { /* TODO: supertest/contract */ });\n  it('POST /payments/webhook defined @ payments.controller.ts:28', () => { /* TODO: supertest/contract */ });\n});",
            "keyword": "\\bwebhook\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/contract.rest.spec.ts",
            "line": 21,
            "snippet": "  it('POST /payments/subscriptions defined @ payments-service.controller.ts:57', () => { /* TODO: supertest/contract */ });\n  it('POST /payments/subscriptions defined @ payments.controller.ts:34', () => { /* TODO: supertest/contract */ });\n  it('POST /payments/webhook defined @ payments-service.controller.ts:46', () => { /* TODO: supertest/contract */ });\n  it('POST /payments/webhook defined @ payments.controller.ts:28', () => { /* TODO: supertest/contract */ });\n});",
            "keyword": "\\bwebhook\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/contract.rest.spec.ts",
            "line": 6,
            "snippet": "describe.skip('REST contract', () => {\n  it('GET /health defined @ health.controller.ts:15', () => { /* TODO: supertest/contract */ });\n  it('GET /metrics defined @ metrics.controller.ts:6', () => { /* TODO: supertest/contract */ });\n  it('GET /payments/orders/:id defined @ payments-service.controller.ts:34', () => { /* TODO: supertest/contract */ });\n  it('GET /payments/products defined @ payments-service.controller.ts:17', () => { /* TODO: supertest/contract */ });\n  it('GET /payments/products defined @ payments.controller.ts:13', () => { /* TODO: supertest/contract */ });",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — predictive-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — predictive-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service",
        "counts": {
          "hits": 8,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 1
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/prisma/schema.prisma",
            "line": 9,
            "snippet": "  id        String   @id @default(cuid())\n  userId    String\n  kind      String\n  payload   Json\n  issuedAt  DateTime @default(now())\n  revoked   Boolean  @default(false)",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/certificate/certificate.service.ts",
            "line": 5,
            "snippet": "import QRCode from 'qrcode';\n\nexport class CertificateService {\n  async issueCertificate(payload: Record<string, any>) {\n    const token = jwt.sign(payload, process.env.CERT_SECRET || 'change_me', { expiresIn: '365d' });\n    const url = `${process.env.CERT_VERIFY_URL || 'https://example.com/verify'}?t=${token}`;",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/certificate/certificate.service.ts",
            "line": 6,
            "snippet": "\nexport class CertificateService {\n  async issueCertificate(payload: Record<string, any>) {\n    const token = jwt.sign(payload, process.env.CERT_SECRET || 'change_me', { expiresIn: '365d' });\n    const url = `${process.env.CERT_VERIFY_URL || 'https://example.com/verify'}?t=${token}`;\n    const qrDataUrl = await QRCode.toDataURL(url);",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/auth/roles.guard.ts",
            "line": 17,
            "snippet": "    const t = token.replace('Bearer ','').trim();\n    if (!t) throw new ForbiddenException('No token');\n    try {\n      const payload:any = jwt.verify(t, process.env.CERT_SECRET || 'change_me');\n      const roles = payload.roles || payload.role || [];\n      const ok = (Array.isArray(roles)?roles:[roles]).some((r:string)=> required.includes(r));",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/auth/roles.guard.ts",
            "line": 18,
            "snippet": "    if (!t) throw new ForbiddenException('No token');\n    try {\n      const payload:any = jwt.verify(t, process.env.CERT_SECRET || 'change_me');\n      const roles = payload.roles || payload.role || [];\n      const ok = (Array.isArray(roles)?roles:[roles]).some((r:string)=> required.includes(r));\n      if (!ok) throw new ForbiddenException('Insufficient role');",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/src/auth/roles.guard.ts",
            "line": 18,
            "snippet": "    if (!t) throw new ForbiddenException('No token');\n    try {\n      const payload:any = jwt.verify(t, process.env.CERT_SECRET || 'change_me');\n      const roles = payload.roles || payload.role || [];\n      const ok = (Array.isArray(roles)?roles:[roles]).some((r:string)=> required.includes(r));\n      if (!ok) throw new ForbiddenException('Insufficient role');",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/certificate-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/certificate-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — ai-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — ai-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-collector",
        "counts": {
          "hits": 3,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-collector/src/index.ts",
            "line": 31,
            "snippet": "  ts: z.number().or(z.string()).transform(v=> Number(v)),\n  uid: z.string().optional(),\n  session: z.string().optional(),\n  payload: z.record(z.any()).optional(),\n  ua: z.string().optional(),\n  ip: z.string().optional()",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-collector/src/index.ts",
            "line": 52,
            "snippet": "      session: e.session || null,\n      ua: e.ua || req.headers['user-agent'] || null,\n      ip: e.ip || req.headers['x-forwarded-for'] || req.socket.remoteAddress || null,\n      payload: JSON.stringify(e.payload || {})\n    }));\n",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-collector/src/index.ts",
            "line": 52,
            "snippet": "      session: e.session || null,\n      ua: e.ua || req.headers['user-agent'] || null,\n      ip: e.ip || req.headers['x-forwarded-for'] || req.socket.remoteAddress || null,\n      payload: JSON.stringify(e.payload || {})\n    }));\n",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — vip-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — vip-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/physio-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/physio-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service",
        "counts": {
          "hits": 3,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — nutrition-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — nutrition-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/nutrition/nutrition.service.ts",
            "line": 30,
            "snippet": "   * Update an existing food item. Only provided fields will be updated.\n   */\n  async updateFoodItem(id: number, input: Partial<UpdateFoodItemInput>) {\n    // Remove the id property from the update payload to avoid errors\n    const { id: _, ...data } = input;\n    return this.prisma.foodItem.update({",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/assessments-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/assessments-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — reward-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — reward-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service",
        "counts": {
          "hits": 4,
          "controllers": 0,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — chat-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — chat-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/chat/chat.resolver.ts",
            "line": 41,
            "snippet": "  }\n\n  @Subscription(() => ChatMessageType, {\n    filter: (payload, variables) => {\n      // If receiverId is provided as a variable, only send messages to that receiver\n      if (variables.receiverId) {",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/chat/chat.resolver.ts",
            "line": 44,
            "snippet": "    filter: (payload, variables) => {\n      // If receiverId is provided as a variable, only send messages to that receiver\n      if (variables.receiverId) {\n        return payload.messageSent.receiverId === variables.receiverId;\n      }\n      return true;",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service",
        "counts": {
          "hits": 4,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — marketplace-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — marketplace-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/marketplace/marketplace.service.ts",
            "line": 24,
            "snippet": "/**\n * MarketplaceService manages an in-memory list of items and purchases. It allows\n * creating, updating, deleting and listing items as well as purchasing items\n * by users. In production, persistent storage and integration with a payment\n * gateway would be required.\n */",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/marketplace/marketplace.service.ts",
            "line": 24,
            "snippet": "/**\n * MarketplaceService manages an in-memory list of items and purchases. It allows\n * creating, updating, deleting and listing items as well as purchasing items\n * by users. In production, persistent storage and integration with a payment\n * gateway would be required.\n */",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — assessment-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — assessment-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — monitoring-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — monitoring-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/analytics-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/analytics-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — coaches-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — coaches-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service",
        "counts": {
          "hits": 4,
          "controllers": 0,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — notifications-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — notifications-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.resolver.ts",
            "line": 36,
            "snippet": "  }\n\n  @Subscription(() => NotificationType, {\n    filter: (payload, variables) => {\n      return payload.notificationSent.userId === variables.userId;\n    },",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications/notifications.resolver.ts",
            "line": 37,
            "snippet": "\n  @Subscription(() => NotificationType, {\n    filter: (payload, variables) => {\n      return payload.notificationSent.userId === variables.userId;\n    },\n  })",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — workouts-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — workouts-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service",
        "counts": {
          "hits": 6,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — auth-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — auth-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/main.js",
            "line": 10,
            "snippet": "await app.register(cors, { origin: true, credentials: true });\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'dev-secret';\nconst sign = (payload)=> jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\n\napp.post('/auth/login', async (req, reply)=>{",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/main.js",
            "line": 10,
            "snippet": "await app.register(cors, { origin: true, credentials: true });\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'dev-secret';\nconst sign = (payload)=> jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\n\napp.post('/auth/login', async (req, reply)=>{",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/jwt.strategy.ts",
            "line": 14,
            "snippet": "      ignoreExpiration: false,\n    });\n  }\n  async validate(payload: any) {\n    return payload;\n  }",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/auth/jwt.strategy.ts",
            "line": 15,
            "snippet": "    });\n  }\n  async validate(payload: any) {\n    return payload;\n  }\n}",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service",
        "counts": {
          "hits": 18,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 1
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — content-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — content-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/prisma/schema.prisma",
            "line": 112,
            "snippet": "  planId    String?\n  type      String   // MEAL_REMINDER|WATER_REMINDER\n  dueAt     DateTime\n  payload   Json?\n  status    String   @default(\"PENDING\") // PENDING|SENT|CANCELLED\n  createdAt DateTime @default(now())",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/main.ts",
            "line": 17,
            "snippet": "// simple channel hub\nconst channels = new Map(); // threadId -> Set<ws>\n\nexport function wsBroadcast(threadId: string, payload: any){\n  const set = channels.get(threadId); if (!set) return;\n  const data = JSON.stringify({ type:'message', threadId, payload });",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/main.ts",
            "line": 19,
            "snippet": "\nexport function wsBroadcast(threadId: string, payload: any){\n  const set = channels.get(threadId); if (!set) return;\n  const data = JSON.stringify({ type:'message', threadId, payload });\n  for (const ws of set){ try{ ws.send(data); }catch(e){} }\n}",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/security/roles.guard.ts",
            "line": 25,
            "snippet": "    try {\n      const jwks = process.env.AUTH_JWKS_URL ? createRemoteJWKSet(new URL(process.env.AUTH_JWKS_URL)) : undefined;\n      const publicKey = process.env.ADMIN_JWT_PUBLIC_KEY;\n      let payload: any;\n      if (jwks) {\n        const v = await jwtVerify(token, jwks, { issuer: process.env.AUTH_ISSUER || undefined, audience: process.env.AUTH_AUDIENCE || undefined });",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/security/roles.guard.ts",
            "line": 28,
            "snippet": "      let payload: any;\n      if (jwks) {\n        const v = await jwtVerify(token, jwks, { issuer: process.env.AUTH_ISSUER || undefined, audience: process.env.AUTH_AUDIENCE || undefined });\n        payload = v.payload;\n      } else if (publicKey) {\n        const v = await jwtVerify(token, new TextEncoder().encode(publicKey));",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/security/roles.guard.ts",
            "line": 28,
            "snippet": "      let payload: any;\n      if (jwks) {\n        const v = await jwtVerify(token, jwks, { issuer: process.env.AUTH_ISSUER || undefined, audience: process.env.AUTH_AUDIENCE || undefined });\n        payload = v.payload;\n      } else if (publicKey) {\n        const v = await jwtVerify(token, new TextEncoder().encode(publicKey));",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/security/roles.guard.ts",
            "line": 31,
            "snippet": "        payload = v.payload;\n      } else if (publicKey) {\n        const v = await jwtVerify(token, new TextEncoder().encode(publicKey));\n        payload = v.payload;\n      } else {\n        return false;",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/security/roles.guard.ts",
            "line": 31,
            "snippet": "        payload = v.payload;\n      } else if (publicKey) {\n        const v = await jwtVerify(token, new TextEncoder().encode(publicKey));\n        payload = v.payload;\n      } else {\n        return false;",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/booking-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — @arman/booking-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — challenges-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — challenges-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — courses-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — courses-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — users-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — users-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — affiliate-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "\\bpayment\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/test/e2e/core.e2e.spec.ts",
            "line": 8,
            "snippet": "describe.skip('E2E core flows — affiliate-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });\n});",
            "keyword": "stripe|zarinpal|idpay|nextpay|sadad|mellat|pay|checkout"
          }
        ]
      }
    ],
    "reservation_booking": [
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72",
        "counts": {
          "hits": 20,
          "controllers": 1,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_booking.controller.ready.ts",
            "line": 1,
            "snippet": "// Stage 14 Ready Controller for REST call: GET /api/booking\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/api-map/server-stubs/ready/rest_GET__api_booking.controller.ready.ts",
            "line": 4,
            "snippet": "// Stage 14 Ready Controller for REST call: GET /api/booking\n/*\nimport { Controller, Get, Post, Patch, Put, Delete } from '@nestjs/common';\n@Controller('api/booking')\nexport class GET__api_bookingController {\n  @Get()",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/lighthouse/collect.js",
            "line": 4,
            "snippet": "#!/usr/bin/env node\nconst fs = require('fs'), path=require('path'), https=require('https'), http=require('http');\nconst BASE = process.env.STAGING_BASE_URL || '';\nconst routes = ['/', '/workouts', '/nutrition', '/booking', '/vip'];\nif (!BASE) { console.error('STAGING_BASE_URL is required'); process.exit(1); }\nconst out = path.join(process.cwd(), '.lighthouse-static');",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/e2e/flow.reservation-payment-notification.e2e.ts",
            "line": 8,
            "snippet": "  const res = await fetch(BASE + path, init);\n  return { status: res.status, json: await res.json().catch(()=>({})) };\n}\ndescribe('flow: reservation→payment→notification', ()=>{\n  it('placeholder smoke', async ()=>{\n    assert.equal(typeof BASE, 'string');",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/e2e/flow.reservation-payment-notification.e2e.ts",
            "line": 12,
            "snippet": "  it('placeholder smoke', async ()=>{\n    assert.equal(typeof BASE, 'string');\n  });\n  it('reservation create (placeholder)', async ()=>{\n    const r = await http('/api/reservations');\n    assert.ok(r.status===200 || r.status===404);",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/test/contract.rest.spec.ts",
            "line": 10,
            "snippet": "  it('GET /api/ai defined @ rest_GET__api_ai.controller.ready.ts:6', () => { /* TODO: supertest/contract */ });\n  it('GET /api/analytics defined @ rest_GET__api_analytics.controller.ready.ts:6', () => { /* TODO: supertest/contract */ });\n  it('GET /api/assessments defined @ rest_GET__api_assessments.controller.ready.ts:6', () => { /* TODO: supertest/contract */ });\n  it('GET /api/booking defined @ rest_GET__api_booking.controller.ready.ts:6', () => { /* TODO: supertest/contract */ });\n  it('GET /api/certificate defined @ rest_GET__api_certificate.controller.ready.ts:6', () => { /* TODO: supertest/contract */ });\n  it('GET /api/chat defined @ rest_GET__api_chat.controller.ready.ts:6', () => { /* TODO: supertest/contract */ });",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — armanvarzesh-monorepo', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/contracts/tests/openapi_contract.test.ts",
            "line": 20,
            "snippet": "      }\n      if (res.status === 200 && path === '/info') {\n        expect(typeof res.body.service).toBe('string');\n        expect(typeof res.body.version).toBe('string');\n        expect(typeof res.body.time).toBe('string');\n      }",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/staging/client_booking.spec.ts",
            "line": 7,
            "snippet": "  await page.goto(base + '/login');\n  await page.fill('input', process.env.STAGING_USER_JWT || 'FAKE.JWT.USER');\n  await page.click('text=ورود');\n  await page.goto(base + '/booking');\n  await expect(page.locator('h2')).toContainText(/booking/i);\n  // TODO: select a real slot selector and confirm booking",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/staging/client_booking.spec.ts",
            "line": 8,
            "snippet": "  await page.fill('input', process.env.STAGING_USER_JWT || 'FAKE.JWT.USER');\n  await page.click('text=ورود');\n  await page.goto(base + '/booking');\n  await expect(page.locator('h2')).toContainText(/booking/i);\n  // TODO: select a real slot selector and confirm booking\n});",
            "keyword": "\\bbooking\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/libs",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/libs/index.ts",
            "line": 1,
            "snippet": "export const version='0.1.0';",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/service-kit",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/service-kit/src/types.ts",
            "line": 7,
            "snippet": "\nexport type ServiceKitOptions = {\n  serviceName: string;\n  version?: string;\n  enableCors?: boolean;\n  corsOrigins?: string[];",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/plans.queries.ts",
            "line": 7,
            "snippet": "export const PLANS_LIST = gql`\n  query Plans($cursor:String, $limit:Int, $search:String){\n    plans(cursor:$cursor, limit:$limit, search:$search){\n      edges{ id title description status version updatedAt assignedCount }\n      pageInfo{ endCursor hasNextPage }\n      total",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/plans.queries.ts",
            "line": 17,
            "snippet": "export const PLAN_BY_ID = gql`\n  query Plan($id:ID!){\n    plan(id:$id){\n      id title description status version updatedAt\n      days{\n        id order title",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/plans.queries.ts",
            "line": 33,
            "snippet": "export const UPSERT_PLAN = gql`\n  mutation UpsertPlan($input:UpsertPlanInput!){\n    upsertPlan(input:$input){\n      id title description status version updatedAt\n    }\n  }",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/plans.queries.ts",
            "line": 40,
            "snippet": "\nexport const DUPLICATE_PLAN = gql`\n  mutation DuplicatePlan($id:ID!){\n    duplicatePlan(id:$id){ id title description status version }\n  }\n`;",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/graphql/queries/plans.queries.ts",
            "line": 46,
            "snippet": "\nexport const PUBLISH_PLAN = gql`\n  mutation PublishPlan($id:ID!){\n    publishPlan(id:$id){ id status version updatedAt }\n  }\n`;",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend",
        "counts": {
          "hits": 59,
          "controllers": 1,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 1
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/test/e2e/reservations.e2e-spec.ts",
            "line": 2,
            "snippet": "describe('Reservations E2E (placeholder)', () => {\n  it('should reserve and prevent double-booking (placeholder)', () => {\n    expect(true).toBe(true);\n  });",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/backend', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/e2e/reservations.e2e.spec.ts",
            "line": 5,
            "snippet": "import { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { ReservationsController } from '../src/reservations/reservations.controller';\nimport { ReservationService } from '../src/reservations/reservation.service';\n\ndescribe('Reservations E2E (memory optimistic)', () => {",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/e2e/reservations.e2e.spec.ts",
            "line": 24,
            "snippet": "\n  afterAll(async () => { await app.close(); });\n\n  it('reserves a slot and prevents double-booking', async () => {\n    const r1 = await request(app.getHttpServer()).post('/reservations/reserve').send({ userId: 'u1', slotId: 'slot-1' });\n    expect(r1.status).toBe(201);",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/e2e/reservations.e2e.spec.ts",
            "line": 24,
            "snippet": "\n  afterAll(async () => { await app.close(); });\n\n  it('reserves a slot and prevents double-booking', async () => {\n    const r1 = await request(app.getHttpServer()).post('/reservations/reserve').send({ userId: 'u1', slotId: 'slot-1' });\n    expect(r1.status).toBe(201);",
            "keyword": "\\bslot\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/e2e/reservations.e2e.spec.ts",
            "line": 25,
            "snippet": "  afterAll(async () => { await app.close(); });\n\n  it('reserves a slot and prevents double-booking', async () => {\n    const r1 = await request(app.getHttpServer()).post('/reservations/reserve').send({ userId: 'u1', slotId: 'slot-1' });\n    expect(r1.status).toBe(201);\n    const r2 = await request(app.getHttpServer()).post('/reservations/reserve').send({ userId: 'u2', slotId: 'slot-1' });",
            "keyword": "\\bslot\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/e2e/reservations.e2e.spec.ts",
            "line": 27,
            "snippet": "  it('reserves a slot and prevents double-booking', async () => {\n    const r1 = await request(app.getHttpServer()).post('/reservations/reserve').send({ userId: 'u1', slotId: 'slot-1' });\n    expect(r1.status).toBe(201);\n    const r2 = await request(app.getHttpServer()).post('/reservations/reserve').send({ userId: 'u2', slotId: 'slot-1' });\n    expect(r2.status).toBeGreaterThanOrEqual(400); // conflict expected\n  });",
            "keyword": "\\bslot\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/metrics/metrics.controller.ts",
            "line": 12,
            "snippet": "/** @deprecated AUTO-MARKED (Stage17): Unused route per Stage 06 census. Keep until cleanup. */\n  @UseGuards(MetricsGuard)\n  @Get('/metrics')\n  @Header('Content-Type', 'text/plain; version=0.0.4')\n  async metricsEndpoint(){ return this.metrics.getMetrics(); }\n}",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/database/prisma/schema.prisma",
            "line": 239,
            "snippet": "}\n\n\nmodel Reservation {\n  id         Int      @id @default(autoincrement())\n  userId     Int",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/database/prisma/schema.prisma",
            "line": 246,
            "snippet": "  startsAt   DateTime\n  endsAt     DateTime\n  status     String   @default(\"active\")\n  version    Int      @default(1)\n\n  @@unique([resourceId, startsAt, endsAt])",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/rewards-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/rewards-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — payments-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/payments-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — predictive-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/predictive-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/certificate-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/certificate-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — ai-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — vip-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/physio-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/physio-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — nutrition-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/nutrition-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessments-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/assessments-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — reward-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — chat-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — marketplace-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/media-worker",
        "counts": {
          "hits": 4,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/media-worker/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/media-worker/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/media-worker/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/media-worker/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — assessment-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — monitoring-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/monitoring-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/analytics-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/analytics-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — coaches-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/coaches-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — notifications-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — workouts-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — auth-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/auth-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service",
        "counts": {
          "hits": 21,
          "controllers": 0,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — content-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 818,
            "snippet": "  @ObjectType() class PlanItemDTO { @Field() id: string; @Field() order: number; @Field() exerciseId: string; @Field({nullable:true}) note?: string; @Field(() => [PlanSetDTO]) sets: PlanSetDTO[]; }\n  @ObjectType() class PlanBlockDTO { @Field({nullable:true}) section?: string; @Field() id: string; @Field() order: number; @Field() type: string; @Field({nullable:true}) protocol?: string; @Field({nullable:true}) protocolParams?: string; @Field({nullable:true}) restBetweenItems?: number; @Field(() => [PlanItemDTO]) items: PlanItemDTO[]; }\n  @ObjectType() class PlanDayDTO { @Field() id: string; @Field() order: number; @Field({nullable:true}) title?: string; @Field({nullable:true}) note?: string; @Field({nullable:true}) voiceUrl?: string; @Field(() => [PlanBlockDTO]) blocks: PlanBlockDTO[]; }\n  @ObjectType() class PlanDTO { @Field() id: string; @Field() title: string; @Field({nullable:true}) description?: string; @Field() status: string; @Field() version: number; @Field(() => [PlanDayDTO]) days: PlanDayDTO[]; @Field() updatedAt: Date; }\n\n  @Query(() => PlanDTO, { nullable: true })",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 831,
            "snippet": "    const where:any = search ? { title: { contains: search, mode: 'insensitive' } } : {};\n    const total = await prisma.plan.count({ where });\n    const rows = await prisma.plan.findMany({ where, take: limit, skip: cursor? Number(cursor):0, orderBy: { updatedAt: 'desc' } });\n    const edges:any = rows.map(r=> ({ id: r.id, title: r.title, description: r.description||'', status: r.status, version: r.version, updatedAt: r.updatedAt, assignedCount: 0 }));\n    const endCursor = String((cursor? Number(cursor):0) + rows.length);\n    return { edges, pageInfo: { endCursor, hasNextPage: (rows.length + (cursor? Number(cursor):0)) < total }, total } as any;",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 831,
            "snippet": "    const where:any = search ? { title: { contains: search, mode: 'insensitive' } } : {};\n    const total = await prisma.plan.count({ where });\n    const rows = await prisma.plan.findMany({ where, take: limit, skip: cursor? Number(cursor):0, orderBy: { updatedAt: 'desc' } });\n    const edges:any = rows.map(r=> ({ id: r.id, title: r.title, description: r.description||'', status: r.status, version: r.version, updatedAt: r.updatedAt, assignedCount: 0 }));\n    const endCursor = String((cursor? Number(cursor):0) + rows.length);\n    return { edges, pageInfo: { endCursor, hasNextPage: (rows.length + (cursor? Number(cursor):0)) < total }, total } as any;",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 884,
            "snippet": "\n  @Mutation(() => PlanDTO)\n  async publishPlan(@Args('id') id: string): Promise<PlanDTO> {\n    const p = await prisma.plan.update({ where: { id }, data: { status: 'PUBLISHED', version: { increment: 1 } } });\n    return p as any;\n  }",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/intake/intake.resolver.ts",
            "line": 29,
            "snippet": "  @Field() slug: string;\n  @Field() title: string;\n  @Field() active: boolean;\n  @Field() version: number;\n  @Field({ nullable: true }) publishedAt?: Date;\n  @Field(() => [IntakeQuestionDTO]) questions: IntakeQuestionDTO[];",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service",
        "counts": {
          "hits": 8,
          "controllers": 1,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/main.ts",
            "line": 8,
            "snippet": "app.module'\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  app.setGlobalPrefix('booking')\n  \n",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/app.module.ts",
            "line": 2,
            "snippet": "import { Module } from '@nestjs/common'\nimport { BookingController } from './booking.controller'\nimport { HealthController } from './health.controller'\nimport { BookingService } from './booking.service'",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/app.module.ts",
            "line": 4,
            "snippet": "import { Module } from '@nestjs/common'\nimport { BookingController } from './booking.controller'\nimport { HealthController } from './health.controller'\nimport { BookingService } from './booking.service'\n@Module({ controllers: [BookingController, HealthController], providers: [BookingService] })\nexport class AppModule{}",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/src/booking.controller.ts",
            "line": 2,
            "snippet": "import { Controller, Get, Post, Put, Delete, Param, Body } from '@nestjs/common'\nimport { BookingService } from './booking.service'\n/** @deprecated AUTO-MARKED (Stage17): Unused route per Stage 06 census. Keep until cleanup. */\n@Controller()",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/booking-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/test/e2e/core.e2e.spec.ts",
            "line": 2,
            "snippet": "/* AUTO-GENERATED STAGE 24: E2E skeleton for core modules — skipped intentionally.\n   Package: @arman/booking-service\n   Tag: booking\n   This file is safe and non-executable without a runner. */",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/test/e2e/core.e2e.spec.ts",
            "line": 3,
            "snippet": "/* AUTO-GENERATED STAGE 24: E2E skeleton for core modules — skipped intentionally.\n   Package: @arman/booking-service\n   Tag: booking\n   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/booking-service', () => {",
            "keyword": "\\bbooking\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/booking-service/test/e2e/core.e2e.spec.ts",
            "line": 5,
            "snippet": "   Package: @arman/booking-service\n   Tag: booking\n   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — @arman/booking-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });",
            "keyword": "\\bbooking\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — challenges-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — courses-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — users-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/users-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/test/e2e/core.e2e.spec.ts",
            "line": 7,
            "snippet": "   This file is safe and non-executable without a runner. */\ndescribe.skip('E2E core flows — affiliate-service', () => {\n  it('bootstrap', () => { /* TODO: bring up app (supertest/app.init) */ });\n  it('happy path — reservation', () => { /* TODO */ });\n  it('happy path — payment', () => { /* TODO */ });\n  it('edge cases', () => { /* TODO */ });",
            "keyword": "\\breservation\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/index.ts",
            "line": 9,
            "snippet": "async function main() {\n  const ctx = await createApp({\n    serviceName,\n    version: pkg.version,\n  });\n",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/index.ts",
            "line": 15,
            "snippet": "  // example endpoint\n  ctx.app.get('/info', (_req, res) => res.json({\n    service: serviceName,\n    version: pkg.version,\n    time: new Date().toISOString()\n  }));",
            "keyword": "\\bversion\\b"
          }
        ]
      }
    ],
    "notifications": [
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72",
        "counts": {
          "hits": 16,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/scan-injection.js",
            "line": 5,
            "snippet": "const fs = require('fs'); const path = require('path');\nconst ROOT = process.argv[2] || process.cwd();\nconst SQL_WORDS = ['select','insert','update','delete','into','from','where','join'];\nfunction walk(dir, exts = ['.ts','.js']) { const out = []; for (const e of fs.readdirSync(dir, { withFileTypes: true })) { const p = path.join(dir, e.name); if (e.isDirectory()) out.push(...walk(p, exts)); else if (exts.includes(path.extname(p))) out.push(p); } return out; }\nfunction scanFile(p) { const text = fs.readFileSync(p, 'utf8'); const lines = text.split(/\\r?\\n/); const findings = []; lines.forEach((ln, i) => {\n  if (ln.includes('$executeRawUnsafe') || ln.includes('$queryRawUnsafe')) findings.push({ line: i+1, kind: 'unsafe-raw', snippet: ln.trim() });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/scan-injection.js",
            "line": 5,
            "snippet": "const fs = require('fs'); const path = require('path');\nconst ROOT = process.argv[2] || process.cwd();\nconst SQL_WORDS = ['select','insert','update','delete','into','from','where','join'];\nfunction walk(dir, exts = ['.ts','.js']) { const out = []; for (const e of fs.readdirSync(dir, { withFileTypes: true })) { const p = path.join(dir, e.name); if (e.isDirectory()) out.push(...walk(p, exts)); else if (exts.includes(path.extname(p))) out.push(p); } return out; }\nfunction scanFile(p) { const text = fs.readFileSync(p, 'utf8'); const lines = text.split(/\\r?\\n/); const findings = []; lines.forEach((ln, i) => {\n  if (ln.includes('$executeRawUnsafe') || ln.includes('$queryRawUnsafe')) findings.push({ line: i+1, kind: 'unsafe-raw', snippet: ln.trim() });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/scan-injection.js",
            "line": 7,
            "snippet": "const SQL_WORDS = ['select','insert','update','delete','into','from','where','join'];\nfunction walk(dir, exts = ['.ts','.js']) { const out = []; for (const e of fs.readdirSync(dir, { withFileTypes: true })) { const p = path.join(dir, e.name); if (e.isDirectory()) out.push(...walk(p, exts)); else if (exts.includes(path.extname(p))) out.push(p); } return out; }\nfunction scanFile(p) { const text = fs.readFileSync(p, 'utf8'); const lines = text.split(/\\r?\\n/); const findings = []; lines.forEach((ln, i) => {\n  if (ln.includes('$executeRawUnsafe') || ln.includes('$queryRawUnsafe')) findings.push({ line: i+1, kind: 'unsafe-raw', snippet: ln.trim() });\n  if (ln.includes('`') && SQL_WORDS.some(w => ln.toLowerCase().includes(w))) { if (ln.includes('+') || ln.includes('${')) findings.push({ line: i+1, kind: 'template-sql', snippet: ln.trim() }); }\n}); return findings; }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/scan-injection.js",
            "line": 8,
            "snippet": "function walk(dir, exts = ['.ts','.js']) { const out = []; for (const e of fs.readdirSync(dir, { withFileTypes: true })) { const p = path.join(dir, e.name); if (e.isDirectory()) out.push(...walk(p, exts)); else if (exts.includes(path.extname(p))) out.push(p); } return out; }\nfunction scanFile(p) { const text = fs.readFileSync(p, 'utf8'); const lines = text.split(/\\r?\\n/); const findings = []; lines.forEach((ln, i) => {\n  if (ln.includes('$executeRawUnsafe') || ln.includes('$queryRawUnsafe')) findings.push({ line: i+1, kind: 'unsafe-raw', snippet: ln.trim() });\n  if (ln.includes('`') && SQL_WORDS.some(w => ln.toLowerCase().includes(w))) { if (ln.includes('+') || ln.includes('${')) findings.push({ line: i+1, kind: 'template-sql', snippet: ln.trim() }); }\n}); return findings; }\nconst files = walk(ROOT); let total = 0; files.forEach(f => { const fds = scanFile(f); if (fds.length) { console.log('>>', path.relative(ROOT, f)); fds.forEach(fd => console.log(`  [${fd.kind}] L${fd.line}: ${fd.snippet}`)); total += fds.length; } });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/scan-injection.js",
            "line": 8,
            "snippet": "function walk(dir, exts = ['.ts','.js']) { const out = []; for (const e of fs.readdirSync(dir, { withFileTypes: true })) { const p = path.join(dir, e.name); if (e.isDirectory()) out.push(...walk(p, exts)); else if (exts.includes(path.extname(p))) out.push(p); } return out; }\nfunction scanFile(p) { const text = fs.readFileSync(p, 'utf8'); const lines = text.split(/\\r?\\n/); const findings = []; lines.forEach((ln, i) => {\n  if (ln.includes('$executeRawUnsafe') || ln.includes('$queryRawUnsafe')) findings.push({ line: i+1, kind: 'unsafe-raw', snippet: ln.trim() });\n  if (ln.includes('`') && SQL_WORDS.some(w => ln.toLowerCase().includes(w))) { if (ln.includes('+') || ln.includes('${')) findings.push({ line: i+1, kind: 'template-sql', snippet: ln.trim() }); }\n}); return findings; }\nconst files = walk(ROOT); let total = 0; files.forEach(f => { const fds = scanFile(f); if (fds.length) { console.log('>>', path.relative(ROOT, f)); fds.forEach(fd => console.log(`  [${fd.kind}] L${fd.line}: ${fd.snippet}`)); total += fds.length; } });",
            "keyword": "\\btemplate\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/parity-check/index.js",
            "line": 8,
            "snippet": "function check(root, name) {\n  let missing = [];\n  for (const f of cfg.features) {\n    if (!fs.existsSync(path.join(root, f))) missing.push(f);\n  }\n  return { name, missing };",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tools/e2e/flow.reservation-payment-notification.e2e.ts",
            "line": 8,
            "snippet": "  const res = await fetch(BASE + path, init);\n  return { status: res.status, json: await res.json().catch(()=>({})) };\n}\ndescribe('flow: reservation→payment→notification', ()=>{\n  it('placeholder smoke', async ()=>{\n    assert.equal(typeof BASE, 'string');",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/backend/unit/notification.service.spec.ts",
            "line": 3,
            "snippet": "\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { NotificationService } from '../../src/notification/notification.service';\ndescribe('NotificationService', () => {\n  let service: NotificationService;",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/backend/unit/notification.service.spec.ts",
            "line": 3,
            "snippet": "\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { NotificationService } from '../../src/notification/notification.service';\ndescribe('NotificationService', () => {\n  let service: NotificationService;",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/tests/backend/e2e/notification.e2e-spec.ts",
            "line": 5,
            "snippet": "import request from 'supertest';\nimport { app } from '../../src/main';\n\ndescribe('Notification E2E', () => {\n  it('should get notifications', async () => {\n    const res = await request(app.getHttpServer())",
            "keyword": "\\bnotification\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/awards-engine",
        "counts": {
          "hits": 5,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/awards-engine/src/index.ts",
            "line": 8,
            "snippet": "export function evaluateAwards(history: DailyMetrics[], existing: Set<AwardCode>): Award[] {\n  const out: Award[] = []; const today = history.at(-1); if (!today) return out;\n  if (today.moveKcal >= today.goals.moveKcal && !existing.has('DAILY_MOVE_GOAL'))\n    out.push({ code: 'DAILY_MOVE_GOAL', achievedAt: new Date().toISOString(), meta: { kcal: today.moveKcal } });\n  const anyEx = history.some(d => d.exerciseMin>0); const prevEx = history.slice(0,-1).some(d => d.exerciseMin>0);\n  if (anyEx && !prevEx && !existing.has('FIRST_WORKOUT')) out.push({ code: 'FIRST_WORKOUT', achievedAt: new Date().toISOString() });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/awards-engine/src/index.ts",
            "line": 10,
            "snippet": "  if (today.moveKcal >= today.goals.moveKcal && !existing.has('DAILY_MOVE_GOAL'))\n    out.push({ code: 'DAILY_MOVE_GOAL', achievedAt: new Date().toISOString(), meta: { kcal: today.moveKcal } });\n  const anyEx = history.some(d => d.exerciseMin>0); const prevEx = history.slice(0,-1).some(d => d.exerciseMin>0);\n  if (anyEx && !prevEx && !existing.has('FIRST_WORKOUT')) out.push({ code: 'FIRST_WORKOUT', achievedAt: new Date().toISOString() });\n  const last7 = history.slice(-7); const cnt = last7.filter(d => d.exerciseMin >= 10).length;\n  if (cnt >= 5 && !existing.has('FIVE_WORKOUTS_WEEK')) out.push({ code: 'FIVE_WORKOUTS_WEEK', achievedAt: new Date().toISOString(), meta: { days: cnt } });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/awards-engine/src/index.ts",
            "line": 12,
            "snippet": "  const anyEx = history.some(d => d.exerciseMin>0); const prevEx = history.slice(0,-1).some(d => d.exerciseMin>0);\n  if (anyEx && !prevEx && !existing.has('FIRST_WORKOUT')) out.push({ code: 'FIRST_WORKOUT', achievedAt: new Date().toISOString() });\n  const last7 = history.slice(-7); const cnt = last7.filter(d => d.exerciseMin >= 10).length;\n  if (cnt >= 5 && !existing.has('FIVE_WORKOUTS_WEEK')) out.push({ code: 'FIVE_WORKOUTS_WEEK', achievedAt: new Date().toISOString(), meta: { days: cnt } });\n  const achieved = (d: DailyMetrics)=> d.moveKcal>=d.goals.moveKcal && d.exerciseMin>=d.goals.exerciseMin && d.standHr>=d.goals.standHr;\n  let streak = 0; for (let i=history.length-1;i>=0;i--){ if (achieved(history[i])) streak++; else break; }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/awards-engine/src/index.ts",
            "line": 15,
            "snippet": "  if (cnt >= 5 && !existing.has('FIVE_WORKOUTS_WEEK')) out.push({ code: 'FIVE_WORKOUTS_WEEK', achievedAt: new Date().toISOString(), meta: { days: cnt } });\n  const achieved = (d: DailyMetrics)=> d.moveKcal>=d.goals.moveKcal && d.exerciseMin>=d.goals.exerciseMin && d.standHr>=d.goals.standHr;\n  let streak = 0; for (let i=history.length-1;i>=0;i--){ if (achieved(history[i])) streak++; else break; }\n  if (streak>=7 && !existing.has('SEVEN_DAY_STREAK')) out.push({ code: 'SEVEN_DAY_STREAK', achievedAt: new Date().toISOString(), meta:{streak} });\n  const month = today.date.slice(0,7); const sum = history.filter(d=>d.date.startsWith(month)).reduce((a,b)=>a+b.moveKcal,0);\n  if (sum >= 20000 && !existing.has('MONTHLY_CHALLENGE')) out.push({ code: 'MONTHLY_CHALLENGE', achievedAt: new Date().toISOString(), meta:{month,kcal:sum,target:20000} });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/awards-engine/src/index.ts",
            "line": 17,
            "snippet": "  let streak = 0; for (let i=history.length-1;i>=0;i--){ if (achieved(history[i])) streak++; else break; }\n  if (streak>=7 && !existing.has('SEVEN_DAY_STREAK')) out.push({ code: 'SEVEN_DAY_STREAK', achievedAt: new Date().toISOString(), meta:{streak} });\n  const month = today.date.slice(0,7); const sum = history.filter(d=>d.date.startsWith(month)).reduce((a,b)=>a+b.moveKcal,0);\n  if (sum >= 20000 && !existing.has('MONTHLY_CHALLENGE')) out.push({ code: 'MONTHLY_CHALLENGE', achievedAt: new Date().toISOString(), meta:{month,kcal:sum,target:20000} });\n  return out;\n}",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/utils",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/utils/src/dispose.ts",
            "line": 19,
            "snippet": "\nexport class Scope {\n  private disposers: Disposer[] = [];\n  add(d: Disposer | void | null) { if (typeof d === 'function') this.disposers.push(d); return d; }\n  disposeAll() { for (const d of this.disposers.splice(0)) try { d(); } catch {} }\n}",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/contracts-tests",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/contracts-tests/tests/contracts-compat.spec.js",
            "line": 20,
            "snippet": "          const p = path.join(d, e);\n          const stat = fs.statSync(p);\n          if (stat.isDirectory()) walk(p);\n          else if (e.endsWith('.ts')) files.push(p);\n        }\n      })(dir);",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/packages/contracts-tests/scripts/make-snapshot.js",
            "line": 11,
            "snippet": "      const p = path.join(d, e);\n      const st = fs.statSync(p);\n      if (st.isDirectory()) walk(p);\n      else if (e.endsWith('.ts')) files.push(p);\n    }\n  })(dir);",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/hooks/useNotification.ts",
            "line": 3,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_NOTIFICATIONS } from \"@graphql/queries/notification.queries\";\nimport { CREATE_NOTIFICATION } from \"@graphql/mutations/notification.mutations\";\n",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/armanfit-admin/src/hooks/useNotification.ts",
            "line": 4,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_NOTIFICATIONS } from \"@graphql/queries/notification.queries\";\nimport { CREATE_NOTIFICATION } from \"@graphql/mutations/notification.mutations\";\n\nexport function useNotification() {",
            "keyword": "\\bnotification\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/useNotification.ts",
            "line": 3,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_NOTIFICATIONS } from \"@graphql/queries/notification.queries\";\nimport { SEND_NOTIFICATION } from \"@graphql/mutations/notification.mutations\";\n",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/coach-app/hooks/useNotification.ts",
            "line": 4,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_NOTIFICATIONS } from \"@graphql/queries/notification.queries\";\nimport { SEND_NOTIFICATION } from \"@graphql/mutations/notification.mutations\";\n\nexport function useNotification() {",
            "keyword": "\\bnotification\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend",
        "counts": {
          "hits": 42,
          "controllers": 1,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 1
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/payments.service.spec.ts",
            "line": 7,
            "snippet": "  public queries: any[] = [];\n  public execs: any[] = [];\n  async query<T>(_sql: any): Promise<T[]> {\n    this.queries.push(_sql);\n    // emulate \"no duplicate\" by default\n    return [] as any;",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/payments.service.spec.ts",
            "line": 12,
            "snippet": "    return [] as any;\n  }\n  async exec(_sql: any): Promise<void> {\n    this.execs.push(_sql);\n    return;\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/e2e.integration.spec.ts",
            "line": 33,
            "snippet": "    const s = String(_sql);\n    if (s.startsWith('INSERT INTO payments')) {\n      // naive parse just for test\n      this.payments.push({ id: String(this.payments.length + 1), user_id: 'demo-user', amount_cents: 10000, currency: 'IRR', status: 'CREATED', created_at: new Date() });\n    }\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/e2e.integration.spec.ts",
            "line": 20,
            "snippet": "    const s = String(_sql);\n    if (s.includes('FROM payments') && s.includes('idempotency_key')) {\n      const match = /idempotency_key\\s*=\\s*\\$\\{(.+?)\\}/.exec(s);\n      // We can't parse template literal placeholder reliably; assume no duplicate\n      return [] as any;\n    }",
            "keyword": "\\btemplate\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/database/prisma/schema.prisma",
            "line": 254,
            "snippet": "\n\n\nmodel Notification {\n  id        Int      @id @default(autoincrement())\n  userId    Int",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/payments/__tests__/payments.service.spec.ts",
            "line": 5,
            "snippet": "describe('PaymentsService', () => {\n  it('creates payment and rejects duplicates', async () => {\n    const created: any[] = [];\n    const prisma: any = { payment: { findUnique: jest.fn().mockResolvedValue(null), create: jest.fn().mockImplementation(({ data }: any) => (created.push(data), Promise.resolve({ id: 'pay_1', ...data }))) } };\n    const svc = new PaymentsService(prisma as any);\n    const dto = { userId: 'u1', amountCents: 1000, currency: 'EUR', idempotencyKey: 'idem-1' };",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/types/shims.d.ts",
            "line": 6,
            "snippet": "declare module '@arman/infra/src/outbox' {\n  export interface OutboxEvent {\n    id?: string;\n    topic: string;\n    payload: unknown;\n    createdAt?: Date;",
            "keyword": "\\btopic\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/security/security.service.ts",
            "line": 18,
            "snippet": "  auditLog: AuditEntry[] = [];\n\n  logAction(userId: number, action: string, meta?: Record<string, unknown>): void {\n    this.auditLog.push({ userId, action, meta, timestamp: new Date() });\n  }\n}",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/notification/reminder.service.ts",
            "line": 2,
            "snippet": "import { Injectable } from '@nestjs/common';\nimport { NotificationService } from '../notification/notification.service';\nimport { UserService } from '../user/user.service';\nimport { Reservation } from '../reservations/reservation.entity';",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/backend/src/notification/reminder.service.ts",
            "line": 2,
            "snippet": "import { Injectable } from '@nestjs/common';\nimport { NotificationService } from '../notification/notification.service';\nimport { UserService } from '../user/user.service';\nimport { Reservation } from '../reservations/reservation.entity';",
            "keyword": "\\bnotification\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 0,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/hooks/useNotification.ts",
            "line": 3,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_NOTIFICATIONS } from \"@graphql/queries/notification.queries\";\nimport { CREATE_NOTIFICATION } from \"@graphql/mutations/notification.mutations\";\n",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/apps/user-app/hooks/useNotification.ts",
            "line": 4,
            "snippet": "\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_NOTIFICATIONS } from \"@graphql/queries/notification.queries\";\nimport { CREATE_NOTIFICATION } from \"@graphql/mutations/notification.mutations\";\n\nexport function useNotification(userId: number) {",
            "keyword": "\\bnotification\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/ai-service/src/ai/ai.service.ts",
            "line": 27,
            "snippet": "    const level = userId % 3;\n    if (level === 0) {\n      return [\n        { exerciseName: 'Push-up', sets: 3, reps: 12, weight: 0 },\n        { exerciseName: 'Bodyweight Squat', sets: 3, reps: 15, weight: 0 },\n        { exerciseName: 'Plank', sets: 3, reps: 60, weight: 0 },",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/vip-service/src/vip/vip.service.ts",
            "line": 30,
            "snippet": "      level,\n      joinedAt: new Date(),\n    };\n    this.vipUsers.push(vip);\n    return vip;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/reward/reward.service.ts",
            "line": 34,
            "snippet": "      xp,\n      createdAt: new Date(),\n    };\n    this.rewards.push(reward);\n    return reward;\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/reward-service/src/reward/reward.service.ts",
            "line": 51,
            "snippet": "      rewardId,\n      grantedAt: new Date(),\n    };\n    this.userRewards.push(userReward);\n    return userReward;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/chat-service/src/chat/chat.service.ts",
            "line": 86,
            "snippet": "      isRead: false,\n      createdAt: new Date(),\n    };\n    this.messages.push(message);\n    return message;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/marketplace/marketplace.service.ts",
            "line": 44,
            "snippet": "      createdBy,\n      createdAt: new Date(),\n    };\n    this.items.push(item);\n    return item;\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/marketplace-service/src/marketplace/marketplace.service.ts",
            "line": 83,
            "snippet": "      price: item.price,\n      purchasedAt: new Date(),\n    };\n    this.purchases.push(purchase);\n    return purchase;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/assessment/assessment.service.ts",
            "line": 41,
            "snippet": "      createdBy,\n      createdAt: new Date(),\n    };\n    this.tests.push(test);\n    return test;\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/assessment-service/src/assessment/assessment.service.ts",
            "line": 75,
            "snippet": "      score,\n      recordedAt: new Date(),\n    };\n    this.results.push(result);\n    return result;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service",
        "counts": {
          "hits": 35,
          "controllers": 1,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 1
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/test/contract.rest.spec.ts",
            "line": 10,
            "snippet": "  it('GET /notifications/:id defined @ notifications.controller.ts:23', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/email defined @ notifications-service.controller.ts:11', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/email defined @ notifications.controller.ts:8', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/push defined @ notifications-service.controller.ts:21', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/push defined @ notifications.controller.ts:18', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/sms defined @ notifications-service.controller.ts:16', () => { /* TODO: supertest/contract */ });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/test/contract.rest.spec.ts",
            "line": 11,
            "snippet": "  it('POST /notifications/email defined @ notifications-service.controller.ts:11', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/email defined @ notifications.controller.ts:8', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/push defined @ notifications-service.controller.ts:21', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/push defined @ notifications.controller.ts:18', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/sms defined @ notifications-service.controller.ts:16', () => { /* TODO: supertest/contract */ });\n  it('POST /notifications/sms defined @ notifications.controller.ts:13', () => { /* TODO: supertest/contract */ });",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/prisma/schema.prisma",
            "line": 21,
            "snippet": "  FAILED\n}\n\nmodel Notification {\n\n  id        String             @id @default(uuid())",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/prisma/schema.prisma",
            "line": 12,
            "snippet": "enum NotificationType {\n  EMAIL\n  SMS\n  PUSH\n}\n",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/tests/e2e/notification.flow.e2e-spec.ts",
            "line": 19,
            "snippet": "    await app.close();\n  });\n\n  it('creates a notification and can list it', async () => {\n    const userId = 1;\n    const message = 'Workout created successfully';",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.service.ts",
            "line": 76,
            "snippet": "\n  // API methods\n  async queueEmail(to: string, subject: string, body: string) {\n    const rec = await this.prisma.notification.create({ data: { type: NotificationType.EMAIL, to, subject, body } });\n    if (this.amqpConn) {\n      const ch = await this.amqpConn.createChannel();",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.service.ts",
            "line": 87,
            "snippet": "  }\n\n  async queueSms(to: string, body: string) {\n    const rec = await this.prisma.notification.create({ data: { type: NotificationType.SMS, to, body } });\n    if (this.amqpConn) {\n      const ch = await this.amqpConn.createChannel();",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.service.ts",
            "line": 98,
            "snippet": "  }\n\n  async queuePush(to: string, body: string) {\n    const rec = await this.prisma.notification.create({ data: { type: NotificationType.PUSH, to, body } });\n    if (this.amqpConn) {\n      const ch = await this.amqpConn.createChannel();",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.service.ts",
            "line": 109,
            "snippet": "  }\n\n  async findById(id: string) {\n    return this.prisma.notification.findUnique({ where: { id } });\n  }\n",
            "keyword": "\\bnotification\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/notifications-service/src/notifications-service.service.ts",
            "line": 122,
            "snippet": "    await transporter.sendMail({\n      from: process.env.MAIL_FROM || 'no-reply@armanfit.local',\n      to: n.to,\n      subject: n.subject || 'Notification',\n      text: n.body\n    });",
            "keyword": "\\bnotification\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service",
        "counts": {
          "hits": 4,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/prisma/seed.ts",
            "line": 4,
            "snippet": "import { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\nconst data = [\n  { name: 'Push Up', level: 'beginner', muscle: 'chest', equipment: 'bodyweight' },\n  { name: 'Pull Up', level: 'intermediate', muscle: 'back', equipment: 'bodyweight' },\n  { name: 'Squat', level: 'beginner', muscle: 'legs', equipment: 'bodyweight' },",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.service.ts",
            "line": 44,
            "snippet": "    for (const ex of pool) {\n      const m = ex.muscle.toLowerCase();\n      if (!byMuscle.has(m)) byMuscle.set(m, []);\n      byMuscle.get(m)!.push(ex);\n    }\n    // Build items",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts-service.service.ts",
            "line": 57,
            "snippet": "      const list = byMuscle.get(m) || [];\n      if (list.length === 0) continue;\n      const ex = list[Math.floor(Math.random() * list.length)];\n      items.push({\n        exerciseId: ex.id,\n        sets: setsByGoal[dto.goal],",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/workouts-service/src/workouts/workouts.service.ts",
            "line": 33,
            "snippet": "    const byMuscle: Record<string, any[]> = {};\n    for (const ex of all) {\n      byMuscle[ex.muscle] = byMuscle[ex.muscle] || [];\n      byMuscle[ex.muscle].push(ex);\n    }\n    const muscles = Object.keys(byMuscle).slice(0, 6);",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service",
        "counts": {
          "hits": 34,
          "controllers": 0,
          "resolvers": 1,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 462,
            "snippet": "          sec += ((b.items?.length||1)-1) * (b.restBetweenItemsSec||30) * (b.rounds||1);\n        }\n      }\n      blocks.push({ blockId: b.id, seconds: sec, rounds: b.rounds||null });\n      total += sec;\n    }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 913,
            "snippet": "  async validatePlan(@Args('planId') planId:string): Promise<ValidationIssueDTO[]> {\n    const issues:ValidationIssueDTO[] = [];\n    const plan:any = await prisma.plan.findUnique({ where:{ id: planId }, include:{ days:{ include:{ blocks:{ include:{ items:true } } } } } });\n    if (!plan){ issues.push({ level:'error', message:'Plan not found' } as any); return issues; }\n    for (const d of plan.days){\n      for (const b of d.blocks){",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 917,
            "snippet": "    for (const d of plan.days){\n      for (const b of d.blocks){\n        const t = (b.type||'SINGLE').toUpperCase();\n        if (t==='SUPERSET' && (b.items||[]).length<2) issues.push({ level:'warn', message:'Superset needs ≥2 items', blockId:b.id } as any);\n        if (t==='TRISET' && (b.items||[]).length<3) issues.push({ level:'warn', message:'Triset needs ≥3 items', blockId:b.id } as any);\n        if (t==='CIRCUIT'){",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 918,
            "snippet": "      for (const b of d.blocks){\n        const t = (b.type||'SINGLE').toUpperCase();\n        if (t==='SUPERSET' && (b.items||[]).length<2) issues.push({ level:'warn', message:'Superset needs ≥2 items', blockId:b.id } as any);\n        if (t==='TRISET' && (b.items||[]).length<3) issues.push({ level:'warn', message:'Triset needs ≥3 items', blockId:b.id } as any);\n        if (t==='CIRCUIT'){\n          if ((b.items||[]).length<3) issues.push({ level:'warn', message:'Circuit recommended ≥3 items', blockId:b.id } as any);",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 920,
            "snippet": "        if (t==='SUPERSET' && (b.items||[]).length<2) issues.push({ level:'warn', message:'Superset needs ≥2 items', blockId:b.id } as any);\n        if (t==='TRISET' && (b.items||[]).length<3) issues.push({ level:'warn', message:'Triset needs ≥3 items', blockId:b.id } as any);\n        if (t==='CIRCUIT'){\n          if ((b.items||[]).length<3) issues.push({ level:'warn', message:'Circuit recommended ≥3 items', blockId:b.id } as any);\n          if (!b.rounds) issues.push({ level:'warn', message:'Circuit requires rounds', blockId:b.id } as any);\n        }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 921,
            "snippet": "        if (t==='TRISET' && (b.items||[]).length<3) issues.push({ level:'warn', message:'Triset needs ≥3 items', blockId:b.id } as any);\n        if (t==='CIRCUIT'){\n          if ((b.items||[]).length<3) issues.push({ level:'warn', message:'Circuit recommended ≥3 items', blockId:b.id } as any);\n          if (!b.rounds) issues.push({ level:'warn', message:'Circuit requires rounds', blockId:b.id } as any);\n        }\n        if (b.protocol==='EMOM' && !(b.protocolParams?.minutes)) issues.push({ level:'warn', message:'EMOM requires minutes', blockId:b.id } as any);",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 923,
            "snippet": "          if ((b.items||[]).length<3) issues.push({ level:'warn', message:'Circuit recommended ≥3 items', blockId:b.id } as any);\n          if (!b.rounds) issues.push({ level:'warn', message:'Circuit requires rounds', blockId:b.id } as any);\n        }\n        if (b.protocol==='EMOM' && !(b.protocolParams?.minutes)) issues.push({ level:'warn', message:'EMOM requires minutes', blockId:b.id } as any);\n        if (b.protocol==='HIIT' && !(b.protocolParams?.rounds)) issues.push({ level:'warn', message:'HIIT requires rounds/work/rest', blockId:b.id } as any);\n      }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 924,
            "snippet": "          if (!b.rounds) issues.push({ level:'warn', message:'Circuit requires rounds', blockId:b.id } as any);\n        }\n        if (b.protocol==='EMOM' && !(b.protocolParams?.minutes)) issues.push({ level:'warn', message:'EMOM requires minutes', blockId:b.id } as any);\n        if (b.protocol==='HIIT' && !(b.protocolParams?.rounds)) issues.push({ level:'warn', message:'HIIT requires rounds/work/rest', blockId:b.id } as any);\n      }\n    }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 809,
            "snippet": "\n\n  @Mutation(() => PlanDTO)\n  async createPlanFromTemplate(@Args('template') template:string, @Args('ownerId') ownerId:string, @Args('title', {nullable:true}) title?:string, @Args('description', {nullable:true}) description?:string): Promise<PlanDTO> {\n    const p:any = await buildPlanFromTemplate(template as any, ownerId, title||undefined, description||undefined);\n    return p as any;",
            "keyword": "\\btemplate\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/content-service/src/plan/plan.resolver.ts",
            "line": 809,
            "snippet": "\n\n  @Mutation(() => PlanDTO)\n  async createPlanFromTemplate(@Args('template') template:string, @Args('ownerId') ownerId:string, @Args('title', {nullable:true}) title?:string, @Args('description', {nullable:true}) description?:string): Promise<PlanDTO> {\n    const p:any = await buildPlanFromTemplate(template as any, ownerId, title||undefined, description||undefined);\n    return p as any;",
            "keyword": "\\btemplate\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service",
        "counts": {
          "hits": 2,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/challenges/challenges.service.ts",
            "line": 41,
            "snippet": "      endDate,\n      createdBy,\n    };\n    this.challenges.push(challenge);\n    return challenge;\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/challenges-service/src/challenges/challenges.service.ts",
            "line": 67,
            "snippet": "      points: 0,\n      joinedAt: new Date(),\n    };\n    this.entries.push(entry);\n    return entry;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service",
        "counts": {
          "hits": 3,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/courses/courses.service.ts",
            "line": 53,
            "snippet": "      endDate,\n      createdAt: new Date(),\n    };\n    this.courses.push(course);\n    return course;\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/courses/courses.service.ts",
            "line": 93,
            "snippet": "      userId,\n      enrolledAt: new Date(),\n    };\n    this.enrollments.push(enrollment);\n    return enrollment;\n  }",
            "keyword": "\\bpush\\b"
          },
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/courses-service/src/courses/courses.service.ts",
            "line": 107,
            "snippet": "      date,\n      durationMinutes,\n    };\n    this.sessions.push(session);\n    return session;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      },
      {
        "package_root": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service",
        "counts": {
          "hits": 1,
          "controllers": 0,
          "resolvers": 0,
          "services": 1,
          "prisma_schema": 0
        },
        "evidence_samples": [
          {
            "file": "/mnt/data/armanvarzesh_v72/armanvarzesh v72/services/affiliate-service/src/affiliate/affiliate.service.ts",
            "line": 28,
            "snippet": "      refCount: 0,\n      createdAt: new Date(),\n    };\n    this.affiliates.push(affiliate);\n    return affiliate;\n  }",
            "keyword": "\\bpush\\b"
          }
        ]
      }
    ]
  }
}