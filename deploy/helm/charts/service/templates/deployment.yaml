apiVersion: apps/v1
kind: Deployment
metadata:
  name: { include "service.fullname" . }
  labels:
    app.kubernetes.io/name: { include "service.name" . }
    app.kubernetes.io/instance: { .Release.Name }
spec:
  replicas: { .Values.replicaCount }
  selector:
    matchLabels:
      app.kubernetes.io/name: { include "service.name" . }
      app.kubernetes.io/instance: { .Release.Name }
  template:
    metadata:
      labels:
        app.kubernetes.io/name: { include "service.name" . }
        app.kubernetes.io/instance: { .Release.Name }
    spec:
      containers:
        - name: service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: { .Values.image.pullPolicy }
          ports:
            - containerPort: 4000
          env:
          {- range .Values.env }
            - name: { .name }
              value: "{ .value }"
          {- end }
          readinessProbe:
            httpGet:
              path: /ready
              port: 4000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 10
            periodSeconds: 15
---
apiVersion: v1
kind: Service
metadata:
  name: { include "service.fullname" . }
spec:
  type: { .Values.service.type }
  ports:
    - port: { .Values.service.port }
      targetPort: 4000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: { include "service.name" . }
    app.kubernetes.io/instance: { .Release.Name }
